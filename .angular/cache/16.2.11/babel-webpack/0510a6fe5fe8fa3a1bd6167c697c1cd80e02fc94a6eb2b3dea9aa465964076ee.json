{"ast":null,"code":"import _asyncToGenerator from \"D:/Local Repo/OrquestaJOSM/Orquesta-JOSM/JOsM/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from, switchMap, throwError, take, delay, retryWhen } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as Realm from \"realm-web\";\nimport * as i0 from \"@angular/core\";\nexport class IntegrantesService {\n  constructor() {\n    const APP_ID = 'data-jynqh'; // Ensure this matches your Realm App ID\n    this.app = new Realm.App({\n      id: APP_ID\n    });\n    this.user$ = from(this.login()).pipe(retryWhen(errors => errors.pipe(delay(1000),\n    // Wait for 1 second before retrying\n    take(5),\n    // Retry up to 5 times\n    switchMap(error => {\n      if (error.statusCode === 401) {\n        // Handle specific errors or re-throw if not recoverable\n        return throwError(() => new Error(\"Authentication failed after retries\"));\n      }\n      return throwError(() => error);\n    }))));\n  }\n  login() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const credentials = Realm.Credentials.anonymous();\n      try {\n        return yield _this.app.logIn(credentials);\n      } catch (error) {\n        console.error(\"Error logging into Realm:\", error);\n        throw error;\n      }\n    })();\n  }\n  callRealmFunction(functionName, args = []) {\n    return this.user$.pipe(switchMap(user => from(user.functions[functionName](...args))), catchError(error => {\n      console.error(`Error calling Realm function ${functionName}`, error);\n      return throwError(() => error);\n    }));\n  }\n  // Define methods for each collection\n  obtenerDirectiva() {\n    return this.callRealmFunction('getDirectivas', []);\n  }\n  obtenerGaleria() {\n    return this.callRealmFunction('getGalerias', []);\n  }\n  obtenerMusicos() {\n    return this.callRealmFunction('getIntegrantes', []);\n  }\n  obtenerInfo() {\n    return this.callRealmFunction('getInfos', []);\n  }\n  obtenerEventos() {\n    return this.callRealmFunction('getEventos', []);\n  }\n  static #_ = this.ɵfac = function IntegrantesService_Factory(t) {\n    return new (t || IntegrantesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IntegrantesService,\n    factory: IntegrantesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["from","switchMap","throwError","take","delay","retryWhen","catchError","Realm","IntegrantesService","constructor","APP_ID","app","App","id","user$","login","pipe","errors","error","statusCode","Error","_this","_asyncToGenerator","credentials","Credentials","anonymous","logIn","console","callRealmFunction","functionName","args","user","functions","obtenerDirectiva","obtenerGaleria","obtenerMusicos","obtenerInfo","obtenerEventos","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\Local Repo\\OrquestaJOSM\\Orquesta-JOSM\\JOsM\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, from, switchMap, throwError, take, delay, retryWhen  } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport * as Realm from \"realm-web\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IntegrantesService {\r\n  private app: Realm.App;\r\n  private user$: Observable<Realm.User>;\r\n\r\n  constructor() {\r\n    const APP_ID = 'data-jynqh'; // Ensure this matches your Realm App ID\r\n    this.app = new Realm.App({ id: APP_ID });\r\n    this.user$ = from(this.login()).pipe(\r\n      retryWhen(errors =>\r\n        errors.pipe(\r\n          delay(1000), // Wait for 1 second before retrying\r\n          take(5), // Retry up to 5 times\r\n          switchMap(error => {\r\n            if (error.statusCode === 401) {\r\n              // Handle specific errors or re-throw if not recoverable\r\n              return throwError(() => new Error(\"Authentication failed after retries\"));\r\n            }\r\n            return throwError(() => error);\r\n          })\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  private async login(): Promise<Realm.User> {\r\n    const credentials = Realm.Credentials.anonymous();\r\n    try {\r\n      return await this.app.logIn(credentials);\r\n    } catch (error) {\r\n      console.error(\"Error logging into Realm:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private callRealmFunction(functionName: string, args: any[] = []): Observable<any> {\r\n    return this.user$.pipe(\r\n      switchMap(user => from(user.functions[functionName](...args))),\r\n      catchError(error => {\r\n        console.error(`Error calling Realm function ${functionName}`, error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Define methods for each collection\r\n  obtenerDirectiva(): Observable<any[]> {\r\n    return this.callRealmFunction('getDirectivas', []);\r\n  }\r\n\r\n  obtenerGaleria(): Observable<any[]> {\r\n    return this.callRealmFunction('getGalerias', []);\r\n  }\r\n\r\n  obtenerMusicos(): Observable<any[]> {\r\n    return this.callRealmFunction('getIntegrantes', []);\r\n  }\r\n\r\n  obtenerInfo(): Observable<any[]> {\r\n    return this.callRealmFunction('getInfos', []);\r\n  }\r\n\r\n  obtenerEventos(): Observable<any[]> {\r\n    return this.callRealmFunction('getEventos', []);\r\n  }\r\n}"],"mappings":";AACA,SAAqBA,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAEC,IAAI,EAAEC,KAAK,EAAEC,SAAS,QAAS,MAAM;AACvF,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,OAAO,KAAKC,KAAK,MAAM,WAAW;;AAKlC,OAAM,MAAOC,kBAAkB;EAI7BC,YAAA;IACE,MAAMC,MAAM,GAAG,YAAY,CAAC,CAAC;IAC7B,IAAI,CAACC,GAAG,GAAG,IAAIJ,KAAK,CAACK,GAAG,CAAC;MAAEC,EAAE,EAAEH;IAAM,CAAE,CAAC;IACxC,IAAI,CAACI,KAAK,GAAGd,IAAI,CAAC,IAAI,CAACe,KAAK,EAAE,CAAC,CAACC,IAAI,CAClCX,SAAS,CAACY,MAAM,IACdA,MAAM,CAACD,IAAI,CACTZ,KAAK,CAAC,IAAI,CAAC;IAAE;IACbD,IAAI,CAAC,CAAC,CAAC;IAAE;IACTF,SAAS,CAACiB,KAAK,IAAG;MAChB,IAAIA,KAAK,CAACC,UAAU,KAAK,GAAG,EAAE;QAC5B;QACA,OAAOjB,UAAU,CAAC,MAAM,IAAIkB,KAAK,CAAC,qCAAqC,CAAC,CAAC;;MAE3E,OAAOlB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH,CACF,CACF;EACH;EAEcH,KAAKA,CAAA;IAAA,IAAAM,KAAA;IAAA,OAAAC,iBAAA;MACjB,MAAMC,WAAW,GAAGhB,KAAK,CAACiB,WAAW,CAACC,SAAS,EAAE;MACjD,IAAI;QACF,aAAaJ,KAAI,CAACV,GAAG,CAACe,KAAK,CAACH,WAAW,CAAC;OACzC,CAAC,OAAOL,KAAK,EAAE;QACdS,OAAO,CAACT,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,MAAMA,KAAK;;IACZ;EACH;EAEQU,iBAAiBA,CAACC,YAAoB,EAAEC,IAAA,GAAc,EAAE;IAC9D,OAAO,IAAI,CAAChB,KAAK,CAACE,IAAI,CACpBf,SAAS,CAAC8B,IAAI,IAAI/B,IAAI,CAAC+B,IAAI,CAACC,SAAS,CAACH,YAAY,CAAC,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC,EAC9DxB,UAAU,CAACY,KAAK,IAAG;MACjBS,OAAO,CAACT,KAAK,CAAC,gCAAgCW,YAAY,EAAE,EAAEX,KAAK,CAAC;MACpE,OAAOhB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEA;EACAe,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACL,iBAAiB,CAAC,eAAe,EAAE,EAAE,CAAC;EACpD;EAEAM,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,iBAAiB,CAAC,aAAa,EAAE,EAAE,CAAC;EAClD;EAEAO,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACP,iBAAiB,CAAC,gBAAgB,EAAE,EAAE,CAAC;EACrD;EAEAQ,WAAWA,CAAA;IACT,OAAO,IAAI,CAACR,iBAAiB,CAAC,UAAU,EAAE,EAAE,CAAC;EAC/C;EAEAS,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACT,iBAAiB,CAAC,YAAY,EAAE,EAAE,CAAC;EACjD;EAAC,QAAAU,CAAA,G;qBA/DU9B,kBAAkB;EAAA;EAAA,QAAA+B,EAAA,G;WAAlB/B,kBAAkB;IAAAgC,OAAA,EAAlBhC,kBAAkB,CAAAiC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}