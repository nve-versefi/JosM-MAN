{"ast":null,"code":"import _asyncToGenerator from \"D:/Local Repo/OrquestaJOSM/Orquesta-JOSM/JOsM/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"D:/Local Repo/OrquestaJOSM/Orquesta-JOSM/JOsM/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"D:/Local Repo/OrquestaJOSM/Orquesta-JOSM/JOsM/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"D:/Local Repo/OrquestaJOSM/Orquesta-JOSM/JOsM/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { EJSON, ObjectId } from 'bson';\nimport * as bson from 'bson';\nexport { bson as BSON };\nvar __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */function () {\n  function BrowserInfo(name, version, os) {\n    this.name = name;\n    this.version = version;\n    this.os = os;\n    this.type = 'browser';\n  }\n  return BrowserInfo;\n}();\nvar NodeInfo = /** @class */function () {\n  function NodeInfo(version) {\n    this.version = version;\n    this.type = 'node';\n    this.name = 'node';\n    this.os = process.platform;\n  }\n  return NodeInfo;\n}();\nvar SearchBotDeviceInfo = /** @class */function () {\n  function SearchBotDeviceInfo(name, version, os, bot) {\n    this.name = name;\n    this.version = version;\n    this.os = os;\n    this.bot = bot;\n    this.type = 'bot-device';\n  }\n  return SearchBotDeviceInfo;\n}();\nvar BotInfo = /** @class */function () {\n  function BotInfo() {\n    this.type = 'bot';\n    this.bot = true; // NOTE: deprecated test name instead\n    this.name = 'bot';\n    this.version = null;\n    this.os = null;\n  }\n  return BotInfo;\n}();\nvar ReactNativeInfo = /** @class */function () {\n  function ReactNativeInfo() {\n    this.type = 'react-native';\n    this.name = 'react-native';\n    this.version = null;\n    this.os = null;\n  }\n  return ReactNativeInfo;\n}();\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [['aol', /AOLShield\\/([0-9\\._]+)/], ['edge', /Edge\\/([0-9\\._]+)/], ['edge-ios', /EdgiOS\\/([0-9\\._]+)/], ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/], ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/], ['samsung', /SamsungBrowser\\/([0-9\\.]+)/], ['silk', /\\bSilk\\/([0-9._-]+)\\b/], ['miui', /MiuiBrowser\\/([0-9\\.]+)$/], ['beaker', /BeakerBrowser\\/([0-9\\.]+)/], ['edge-chromium', /EdgA?\\/([0-9\\.]+)/], ['chromium-webview', /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/], ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/], ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/], ['fxios', /FxiOS\\/([0-9\\.]+)/], ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/], ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/], ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/], ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/], ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/], ['ie', /MSIE\\s(7\\.0)/], ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/], ['android', /Android\\s([0-9\\.]+)/], ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/], ['safari', /Version\\/([0-9\\._]+).*Safari/], ['facebook', /FB[AS]V\\/([0-9\\.]+)/], ['instagram', /Instagram\\s([0-9\\.]+)/], ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/], ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/], ['curl', /^curl\\/([0-9\\.]+)$/], ['searchbot', SEARCHBOX_UA_REGEX]];\nvar operatingSystemRules = [['iOS', /iP(hone|od|ad)/], ['Android OS', /Android/], ['BlackBerry OS', /BlackBerry|BB10/], ['Windows Mobile', /IEMobile/], ['Amazon OS', /Kindle/], ['Windows 3.11', /Win16/], ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/], ['Windows 98', /(Windows 98)|(Win98)/], ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/], ['Windows XP', /(Windows NT 5.1)|(Windows XP)/], ['Windows Server 2003', /(Windows NT 5.2)/], ['Windows Vista', /(Windows NT 6.0)/], ['Windows 7', /(Windows NT 6.1)/], ['Windows 8', /(Windows NT 6.2)/], ['Windows 8.1', /(Windows NT 6.3)/], ['Windows 10', /(Windows NT 10.0)/], ['Windows ME', /Windows ME/], ['Open BSD', /OpenBSD/], ['Sun OS', /SunOS/], ['Chrome OS', /CrOS/], ['Linux', /(Linux)|(X11)/], ['Mac OS', /(Mac_PowerPC)|(Macintosh)/], ['QNX', /QNX/], ['BeOS', /BeOS/], ['OS/2', /OS\\/2/]];\nfunction detect(userAgent) {\n  if (!!userAgent) {\n    return parseUserAgent(userAgent);\n  }\n  if (typeof document === 'undefined' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return new ReactNativeInfo();\n  }\n  if (typeof navigator !== 'undefined') {\n    return parseUserAgent(navigator.userAgent);\n  }\n  return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n  // opted for using reduce here rather than Array#first with a regex.test call\n  // this is primarily because using the reduce we only perform the regex\n  // execution once rather than once for the test and for the exec again below\n  // probably something that needs to be benchmarked though\n  return ua !== '' && userAgentRules.reduce(function (matched, _a) {\n    var browser = _a[0],\n      regex = _a[1];\n    if (matched) {\n      return matched;\n    }\n    var uaMatch = regex.exec(ua);\n    return !!uaMatch && [browser, uaMatch];\n  }, false);\n}\nfunction parseUserAgent(ua) {\n  var matchedRule = matchUserAgent(ua);\n  if (!matchedRule) {\n    return null;\n  }\n  var name = matchedRule[0],\n    match = matchedRule[1];\n  if (name === 'searchbot') {\n    return new BotInfo();\n  }\n  // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n  var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n  if (versionParts) {\n    if (versionParts.length < REQUIRED_VERSION_PARTS) {\n      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n    }\n  } else {\n    versionParts = [];\n  }\n  var version = versionParts.join('.');\n  var os = detectOS(ua);\n  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n  if (searchBotMatch && searchBotMatch[1]) {\n    return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n  }\n  return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n  for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n    var _a = operatingSystemRules[ii],\n      os = _a[0],\n      regex = _a[1];\n    var match = regex.exec(ua);\n    if (match) {\n      return os;\n    }\n  }\n  return null;\n}\nfunction getNodeVersion() {\n  var isNode = typeof process !== 'undefined' && process.version;\n  return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n  var output = [];\n  for (var ii = 0; ii < count; ii++) {\n    output.push('0');\n  }\n  return output;\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nlet DefaultNetworkTransport = /*#__PURE__*/(() => {\n  class DefaultNetworkTransport {\n    constructor() {\n      if (!DefaultNetworkTransport.fetch) {\n        throw new Error(\"DefaultNetworkTransport.fetch must be set before it's used\");\n      }\n      if (!DefaultNetworkTransport.AbortController) {\n        throw new Error(\"DefaultNetworkTransport.AbortController must be set before it's used\");\n      }\n    }\n    fetchWithCallbacks(request, handler) {\n      // tslint:disable-next-line: no-console\n      this.fetch(request).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          const decodedBody = yield response.text();\n          // Pull out the headers of the response\n          const responseHeaders = {};\n          response.headers.forEach((value, key) => {\n            responseHeaders[key] = value;\n          });\n          return {\n            statusCode: response.status,\n            headers: responseHeaders,\n            body: decodedBody\n          };\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).then(r => handler.onSuccess(r)).catch(e => handler.onError(e));\n    }\n    fetch(request) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const {\n          timeoutMs,\n          url,\n          ...rest\n        } = request;\n        const {\n          signal,\n          cancelTimeout\n        } = _this.createTimeoutSignal(timeoutMs);\n        try {\n          // We'll await the response to catch throw our own error\n          return yield DefaultNetworkTransport.fetch(url, {\n            ...DefaultNetworkTransport.extraFetchOptions,\n            signal,\n            ...rest\n          });\n        } finally {\n          // Whatever happens, cancel any timeout\n          cancelTimeout();\n        }\n      })();\n    }\n    createTimeoutSignal(timeoutMs) {\n      if (typeof timeoutMs === \"number\") {\n        const controller = new DefaultNetworkTransport.AbortController();\n        // Call abort after a specific number of milliseconds\n        const timeout = setTimeout(() => {\n          controller.abort();\n        }, timeoutMs);\n        return {\n          signal: controller.signal,\n          cancelTimeout: () => {\n            clearTimeout(timeout);\n          }\n        };\n      } else {\n        return {\n          signal: undefined,\n          cancelTimeout: () => {\n            /* No-op */\n          }\n        };\n      }\n    }\n  }\n  DefaultNetworkTransport.DEFAULT_HEADERS = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  ////////////////////////////////////////////////////////////////////////////\n  /**\n   * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n   * to use its own method for determining whether we are in development mode.\n   *\n   * @param state A boolean indicating whether the user's app is running in\n   * development mode or not.\n   */\n  return DefaultNetworkTransport;\n})();\nconst setIsDevelopmentMode = state => {};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Exports a globalThis which is polyfilled for iOS 11/12\n// From https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst check = function (it) {\n  return it && it.Math == Math && it;\n};\n// eslint-disable-next-line no-restricted-globals\nconst safeGlobalThis =\n// eslint-disable-next-line no-restricted-globals\ncheck(typeof globalThis == \"object\" && globalThis) || check(typeof window == \"object\" && window) ||\n// eslint-disable-next-line no-restricted-globals -- safe\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `self`\ncheck(typeof self == \"object\" && self) ||\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `global`\ncheck(typeof global == \"object\" && global) ||\n// eslint-disable-next-line no-new-func -- fallback\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore allow `this`\n  return this;\n}() || Function(\"return this\")();\n\n////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\nsetIsDevelopmentMode(typeof __DEV__ !== \"undefined\" && __DEV__);\n\n////////////////////////////////////////////////////////////////////////////\nDefaultNetworkTransport.fetch = safeGlobalThis.fetch.bind(safeGlobalThis);\nDefaultNetworkTransport.AbortController = safeGlobalThis.AbortController.bind(safeGlobalThis);\n\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.2';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => tab[c] = i);\n  return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : (it, fn = x => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = src => src.replace(/=/g, '').replace(/[+\\/]/g, m0 => m0 == '+' ? '-' : '_');\nconst _tidyB64 = s => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = bin => {\n  // console.log('polyfilled');\n  let u32,\n    c0,\n    c1,\n    c2,\n    asc = '';\n  const pad = bin.length % 3;\n  for (let i = 0; i < bin.length;) {\n    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = c0 << 16 | c1 << 8 | c2;\n    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n  }\n  return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? bin => btoa(bin) : _hasBuffer ? bin => Buffer.from(bin, 'binary').toString('base64') : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer ? u8a => Buffer.from(u8a).toString('base64') : u8a => {\n  // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n  const maxargs = 0x1000;\n  let strs = [];\n  for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n  }\n  return _btoa(strs.join(''));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = c => {\n  if (c.length < 2) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  } else {\n    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n    return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = u => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer ? s => Buffer.from(s, 'utf8').toString('base64') : _TE ? s => _fromUint8Array(_TE.encode(s)) : s => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = src => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = cccc => {\n  switch (cccc.length) {\n    case 4:\n      var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n        offset = cp - 0x10000;\n      return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n    case 3:\n      return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n    default:\n      return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n  }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = b => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = asc => {\n  // console.log('polyfilled');\n  asc = asc.replace(/\\s+/g, '');\n  if (!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n    bin = '',\n    r1,\n    r2;\n  for (let i = 0; i < asc.length;) {\n    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n  }\n  return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? asc => atob(_tidyB64(asc)) : _hasBuffer ? asc => Buffer.from(asc, 'base64').toString('binary') : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer ? a => _U8Afrom(Buffer.from(a, 'base64')) : a => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = a => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer ? a => Buffer.from(a, 'base64').toString('utf8') : _TD ? a => _TD.decode(_toUint8Array(a)) : a => btou(_atob(a));\nconst _unURI = a => _tidyB64(a.replace(/[-_]/g, m0 => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = src => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = src => {\n  if (typeof src !== 'string') return false;\n  const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n  return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = v => {\n  return {\n    value: v,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n  _add('fromBase64', function () {\n    return decode(this);\n  });\n  _add('toBase64', function (urlsafe) {\n    return encode(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return encode(this, true);\n  });\n  _add('toBase64URL', function () {\n    return encode(this, true);\n  });\n  _add('toUint8Array', function () {\n    return toUint8Array(this);\n  });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n  _add('toBase64', function (urlsafe) {\n    return fromUint8Array(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return fromUint8Array(this, true);\n  });\n  _add('toBase64URL', function () {\n    return fromUint8Array(this, true);\n  });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n  extendString();\n  extendUint8Array();\n};\nconst gBase64 = {\n  version: version,\n  VERSION: VERSION,\n  atob: _atob,\n  atobPolyfill: atobPolyfill,\n  btoa: _btoa,\n  btoaPolyfill: btoaPolyfill,\n  fromBase64: decode,\n  toBase64: encode,\n  encode: encode,\n  encodeURI: encodeURI,\n  encodeURL: encodeURI,\n  utob: utob,\n  btou: btou,\n  decode: decode,\n  isValid: isValid,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array,\n  extendString: extendString,\n  extendUint8Array: extendUint8Array,\n  extendBuiltins: extendBuiltins\n};\n\n////////////////////////////////////////////////////////////////////////////\nconst SERIALIZATION_OPTIONS = {\n  relaxed: false // Ensure Canonical mode\n};\n/**\n * Serialize an object containing BSON types into extended-JSON.\n *\n * @param obj The object containing BSON types.\n * @returns The document in extended-JSON format.\n */\nfunction serialize(obj) {\n  return EJSON.serialize(obj, SERIALIZATION_OPTIONS);\n}\n/**\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\n *\n * @param obj The object or array of objects in extended-JSON format.\n * @returns The object or array of objects with inflated BSON types.\n */\nfunction deserialize(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(doc => EJSON.deserialize(doc));\n  } else {\n    return EJSON.deserialize(obj);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * The type of a user.\n */\nvar UserType = /*#__PURE__*/function (UserType) {\n  /**\n   * A normal end-user created this user.\n   */\n  UserType[\"Normal\"] = \"normal\";\n  /**\n   * The user was created by the server.\n   */\n  UserType[\"Server\"] = \"server\";\n  return UserType;\n}(UserType || {});\n/** @ignore */\nvar DataKey = /*#__PURE__*/function (DataKey) {\n  /** @ignore */\n  DataKey[\"NAME\"] = \"name\";\n  /** @ignore */\n  DataKey[\"EMAIL\"] = \"email\";\n  /** @ignore */\n  DataKey[\"PICTURE\"] = \"picture\";\n  /** @ignore */\n  DataKey[\"FIRST_NAME\"] = \"first_name\";\n  /** @ignore */\n  DataKey[\"LAST_NAME\"] = \"last_name\";\n  /** @ignore */\n  DataKey[\"GENDER\"] = \"gender\";\n  /** @ignore */\n  DataKey[\"BIRTHDAY\"] = \"birthday\";\n  /** @ignore */\n  DataKey[\"MIN_AGE\"] = \"min_age\";\n  /** @ignore */\n  DataKey[\"MAX_AGE\"] = \"max_age\";\n  return DataKey;\n}(DataKey || {});\nconst DATA_MAPPING = {\n  [DataKey.NAME]: \"name\",\n  [DataKey.EMAIL]: \"email\",\n  [DataKey.PICTURE]: \"pictureUrl\",\n  [DataKey.FIRST_NAME]: \"firstName\",\n  [DataKey.LAST_NAME]: \"lastName\",\n  [DataKey.GENDER]: \"gender\",\n  [DataKey.BIRTHDAY]: \"birthday\",\n  [DataKey.MIN_AGE]: \"minAge\",\n  [DataKey.MAX_AGE]: \"maxAge\"\n};\n/** @inheritdoc */\nclass UserProfile {\n  /**\n   * @param response The response of a call fetching the users profile.\n   */\n  constructor(response) {\n    /** @ignore */\n    this.type = UserType.Normal;\n    /** @ignore */\n    this.identities = [];\n    if (typeof response === \"object\" && response !== null) {\n      const {\n        type,\n        identities,\n        data\n      } = response;\n      if (typeof type === \"string\") {\n        this.type = type;\n      } else {\n        throw new Error(\"Expected 'type' in the response body\");\n      }\n      if (Array.isArray(identities)) {\n        this.identities = identities.map(identity => {\n          const {\n            id,\n            provider_type: providerType\n          } = identity;\n          return {\n            id,\n            providerType\n          };\n        });\n      } else {\n        throw new Error(\"Expected 'identities' in the response body\");\n      }\n      if (typeof data === \"object\" && data !== null) {\n        const mappedData = Object.fromEntries(Object.entries(data).map(([key, value]) => {\n          if (key in DATA_MAPPING) {\n            // Translate any known data field to its JS idiomatic alias\n            return [DATA_MAPPING[key], value];\n          } else {\n            // Pass through any other values\n            return [key, value];\n          }\n        }));\n        // We can use `any` since we trust the user supplies the correct type\n        this.data = deserialize(mappedData);\n      } else {\n        throw new Error(\"Expected 'data' in the response body\");\n      }\n    } else {\n      this.data = {};\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * A `Storage` which will prefix a key part to every operation.\n */\nlet PrefixedStorage = /*#__PURE__*/(() => {\n  class PrefixedStorage {\n    /**\n     * Construct a `Storage` which will prefix a key part to every operation.\n     *\n     * @param storage The underlying storage to use for operations.\n     * @param keyPart The part of the key to prefix when performing operations.\n     */\n    constructor(storage, keyPart) {\n      this.storage = storage;\n      this.keyPart = keyPart;\n    }\n    /** @inheritdoc */\n    get(key) {\n      return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n    }\n    /** @inheritdoc */\n    set(key, value) {\n      return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\n    }\n    /** @inheritdoc */\n    remove(key) {\n      return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n    }\n    /** @inheritdoc */\n    prefix(keyPart) {\n      return new PrefixedStorage(this, keyPart);\n    }\n    /** @inheritdoc */\n    clear(prefix = \"\") {\n      return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\n    }\n    /** @inheritdoc */\n    addListener(listener) {\n      return this.storage.addListener(listener);\n    }\n    /** @inheritdoc */\n    removeListener(listener) {\n      return this.storage.addListener(listener);\n    }\n  }\n  /**\n   * The string separating two parts.\n   */\n  PrefixedStorage.PART_SEPARATOR = \":\";\n\n  ////////////////////////////////////////////////////////////////////////////\n  /**\n   * In-memory storage that will not be persisted.\n   */\n  return PrefixedStorage;\n})();\nclass MemoryStorage {\n  constructor() {\n    /**\n     * Internal state of the storage.\n     */\n    this.storage = {};\n    /**\n     * A set of listners.\n     */\n    this.listeners = new Set();\n  }\n  /** @inheritdoc */\n  get(key) {\n    if (key in this.storage) {\n      return this.storage[key];\n    } else {\n      return null;\n    }\n  }\n  /** @inheritdoc */\n  set(key, value) {\n    this.storage[key] = value;\n    // Fire the listeners\n    this.fireListeners();\n  }\n  /** @inheritdoc */\n  remove(key) {\n    delete this.storage[key];\n    // Fire the listeners\n    this.fireListeners();\n  }\n  /** @inheritdoc */\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n  clear(prefix) {\n    // Iterate all keys and delete their values if they have a matching prefix\n    for (const key of Object.keys(this.storage)) {\n      if (!prefix || key.startsWith(prefix)) {\n        delete this.storage[key];\n      }\n    }\n    // Fire the listeners\n    this.fireListeners();\n  }\n  /** @inheritdoc */\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n  /** @inheritdoc */\n  removeListener(listener) {\n    this.listeners.delete(listener);\n  }\n  /**\n   * Tell the listeners that a change occurred.\n   */\n  fireListeners() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\nconst PROFILE_STORAGE_KEY = \"profile\";\nconst PROVIDER_TYPE_STORAGE_KEY = \"providerType\";\n/**\n * Storage specific to the app.\n */\nclass UserStorage extends PrefixedStorage {\n  /**\n   * Construct a storage for a `User`.\n   *\n   * @param storage The underlying storage to wrap.\n   * @param userId The id of the user.\n   */\n  constructor(storage, userId) {\n    super(storage, `user(${userId})`);\n  }\n  /**\n   * Get the access token from storage.\n   *\n   * @returns Access token (null if unknown).\n   */\n  get accessToken() {\n    return this.get(ACCESS_TOKEN_STORAGE_KEY);\n  }\n  /**\n   * Set the access token in storage.\n   *\n   * @param value Access token (null if unknown).\n   */\n  set accessToken(value) {\n    if (value === null) {\n      this.remove(ACCESS_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(ACCESS_TOKEN_STORAGE_KEY, value);\n    }\n  }\n  /**\n   * Get the refresh token from storage.\n   *\n   * @returns Refresh token (null if unknown and user is logged out).\n   */\n  get refreshToken() {\n    return this.get(REFRESH_TOKEN_STORAGE_KEY);\n  }\n  /**\n   * Set the refresh token in storage.\n   *\n   * @param value Refresh token (null if unknown and user is logged out).\n   */\n  set refreshToken(value) {\n    if (value === null) {\n      this.remove(REFRESH_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(REFRESH_TOKEN_STORAGE_KEY, value);\n    }\n  }\n  /**\n   * Get the user profile from storage.\n   *\n   * @returns User profile (undefined if its unknown).\n   */\n  get profile() {\n    const value = this.get(PROFILE_STORAGE_KEY);\n    if (value) {\n      const profile = new UserProfile();\n      // Patch in the values\n      Object.assign(profile, JSON.parse(value));\n      return profile;\n    }\n  }\n  /**\n   * Set the user profile in storage.\n   *\n   * @param value User profile (undefined if its unknown).\n   */\n  set profile(value) {\n    if (value) {\n      this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\n    } else {\n      this.remove(PROFILE_STORAGE_KEY);\n    }\n  }\n  /**\n   * Get the type of authentication provider used to authenticate\n   *\n   * @returns User profile (undefined if its unknown).\n   */\n  get providerType() {\n    const value = this.get(PROVIDER_TYPE_STORAGE_KEY);\n    if (value) {\n      return value;\n    }\n  }\n  /**\n   * Set the type of authentication provider used to authenticate\n   *\n   * @param value Type of authentication provider.\n   */\n  set providerType(value) {\n    if (value) {\n      this.set(PROVIDER_TYPE_STORAGE_KEY, value);\n    } else {\n      this.remove(PROVIDER_TYPE_STORAGE_KEY);\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @param obj The object to remove keys (and undefined values from)\n * @returns A new object without the keys where the value is undefined.\n */\nfunction removeKeysWithUndefinedValues(obj) {\n  return Object.fromEntries(Object.entries(obj).filter(entry => typeof entry[1] !== \"undefined\"));\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Generate a random sequence of characters.\n *\n * @param length The length of the string.\n * @param alphabet The alphabet of characters to pick from.\n * @returns A string of characters picked randomly from `alphabet`.\n */\nfunction generateRandomString(length, alphabet) {\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return result;\n}\n/**\n * Encode an object mapping from string to string, into a query string to be appended a URL.\n *\n * @param params The parameters to include in the string.\n * @param prefixed Should the \"?\" prefix be added if values exists?\n * @returns A URL encoded representation of the parameters (omitting a \"?\" prefix).\n */\nfunction encodeQueryString(params, prefixed = true) {\n  // Filter out undefined values\n  const cleanedParams = removeKeysWithUndefinedValues(params);\n  // Determine if a prefixed \"?\" is appropreate\n  const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? \"?\" : \"\";\n  // Transform keys and values to a query string\n  return prefix + Object.entries(cleanedParams).map(([k, v]) => `${k}=${encodeURIComponent(v)}`).join(\"&\");\n}\n/**\n * Decodes a query string into an object.\n *\n * @param str The query string to decode.\n * @returns The decoded query string.\n */\nfunction decodeQueryString(str) {\n  const cleanStr = str[0] === \"?\" ? str.substr(1) : str;\n  return Object.fromEntries(cleanStr.split(\"&\").filter(s => s.length > 0).map(kvp => kvp.split(\"=\")).map(([k, v]) => [k, decodeURIComponent(v)]));\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A list of names that functions cannot have to be callable through the functions proxy.\n */\nconst RESERVED_NAMES = [\"inspect\", \"callFunction\", \"callFunctionStreaming\",\n// Methods defined on the Object.prototype might be \"typeof probed\" and called by libraries and runtime environments.\n...Object.getOwnPropertyNames(Object.prototype)];\n/**\n * Remove the key for any fields with undefined values.\n *\n * @param args The arguments to clean.\n * @returns The cleaned arguments.\n */\nfunction cleanArgs(args) {\n  for (const arg of args) {\n    if (typeof arg === \"object\" && arg) {\n      for (const [key, value] of Object.entries(arg)) {\n        if (value === undefined) {\n          delete arg[key];\n        }\n      }\n    }\n  }\n  return args;\n}\n/**\n * Remove keys for any undefined values and serialize to EJSON.\n *\n * @param args The arguments to clean and serialize.\n * @returns The cleaned and serialized arguments.\n */\nfunction cleanArgsAndSerialize(args) {\n  const cleaned = cleanArgs(args);\n  return cleaned.map(arg => typeof arg === \"object\" ? serialize(arg) : arg);\n}\n/**\n * Defines how functions are called.\n */\nclass FunctionsFactory {\n  /**\n   * @param fetcher The underlying fetcher to use when sending requests.\n   * @param config Additional configuration parameters.\n   */\n  constructor(fetcher, config = {}) {\n    this.fetcher = fetcher;\n    this.serviceName = config.serviceName;\n    this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;\n  }\n  /**\n   * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\n   *\n   * @param fetcher The underlying fetcher to use when requesting.\n   * @param config Additional configuration parameters.\n   * @returns The newly created factory of functions.\n   */\n  static create(fetcher, config = {}) {\n    // Create a proxy, wrapping a simple object returning methods that calls functions\n    // TODO: Lazily fetch available functions and return these from the ownKeys() trap\n    const factory = new FunctionsFactory(fetcher, config);\n    // Wrap the factory in a proxy that calls the internal call method\n    return new Proxy(factory, {\n      get(target, p, receiver) {\n        if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\n          return target.callFunction.bind(target, p);\n        } else {\n          const prop = Reflect.get(target, p, receiver);\n          return typeof prop === \"function\" ? prop.bind(target) : prop;\n        }\n      }\n    });\n  }\n  /**\n   * Call a remote function by it's name.\n   *\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n  callFunction(name, ...args) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\n      const body = {\n        name,\n        arguments: _this2.argsTransformation ? _this2.argsTransformation(args) : args\n      };\n      if (_this2.serviceName) {\n        body.service = _this2.serviceName;\n      }\n      const appRoute = _this2.fetcher.appRoute;\n      return _this2.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.functionsCall().path,\n        body\n      });\n    })();\n  }\n  /**\n   * Call a remote function by it's name.\n   *\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n  callFunctionStreaming(name, ...args) {\n    const body = {\n      name,\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args\n    };\n    if (this.serviceName) {\n      body.service = this.serviceName;\n    }\n    const appRoute = this.fetcher.appRoute;\n    const qs = encodeQueryString({\n      [\"baas_request\"]: gBase64.encode(JSON.stringify(body))\n    });\n    return this.fetcher.fetchStream({\n      method: \"GET\",\n      path: appRoute.functionsCall().path + qs\n    });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass EmailPasswordAuth {\n  /**\n   * Construct an interface to the email / password authentication provider.\n   *\n   * @param fetcher The underlying fetcher used to request the services.\n   * @param providerName Optional custom name of the authentication provider.\n   */\n  constructor(fetcher, providerName = \"local-userpass\") {\n    this.fetcher = fetcher;\n    this.providerName = providerName;\n  }\n  /** @inheritdoc */\n  registerUser(details) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this3.fetcher.appRoute;\n      yield _this3.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this3.providerName).register().path,\n        body: details\n      });\n    })();\n  }\n  /** @inheritdoc */\n  confirmUser(details) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this4.fetcher.appRoute;\n      yield _this4.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this4.providerName).confirm().path,\n        body: details\n      });\n    })();\n  }\n  /** @inheritdoc */\n  resendConfirmationEmail(details) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this5.fetcher.appRoute;\n      yield _this5.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this5.providerName).confirmSend().path,\n        body: details\n      });\n    })();\n  }\n  /** @inheritdoc */\n  retryCustomConfirmation(details) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this6.fetcher.appRoute;\n      yield _this6.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this6.providerName).confirmCall().path,\n        body: details\n      });\n    })();\n  }\n  /** @inheritdoc */\n  resetPassword(details) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this7.fetcher.appRoute;\n      yield _this7.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this7.providerName).reset().path,\n        body: details\n      });\n    })();\n  }\n  /** @inheritdoc */\n  sendResetPasswordEmail(details) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this8.fetcher.appRoute;\n      yield _this8.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this8.providerName).resetSend().path,\n        body: details\n      });\n    })();\n  }\n  /** @inheritdoc */\n  callResetPasswordFunction(details, ...args) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const appRoute = _this9.fetcher.appRoute;\n      yield _this9.fetcher.fetchJSON({\n        method: \"POST\",\n        path: appRoute.emailPasswordAuth(_this9.providerName).resetCall().path,\n        body: {\n          ...details,\n          arguments: args\n        }\n      });\n    })();\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @returns The base api route.\n */\nfunction api() {\n  return {\n    path: \"/api/client/v2.0\",\n    /**\n     * @param appId The id of the app.\n     * @returns The URL of the app endpoint.\n     */\n    app(appId) {\n      return {\n        path: this.path + `/app/${appId}`,\n        /**\n         * @returns The URL of the app location endpoint.\n         */\n        location() {\n          return {\n            path: this.path + \"/location\"\n          };\n        },\n        /**\n         * @param providerName The name of the provider.\n         * @returns The app url concatinated with the /auth/providers/{providerName}\n         */\n        authProvider(providerName) {\n          return {\n            path: this.path + `/auth/providers/${providerName}`,\n            /**\n             * @returns Get the URL of an authentication provider.\n             */\n            login() {\n              return {\n                path: this.path + \"/login\"\n              };\n            }\n          };\n        },\n        /**\n         * @param providerName The name of the provider.\n         * @returns The app url concatinated with the /auth/providers/{providerName}\n         */\n        emailPasswordAuth(providerName) {\n          const authProviderRoutes = this.authProvider(providerName);\n          return {\n            ...authProviderRoutes,\n            register() {\n              return {\n                path: this.path + \"/register\"\n              };\n            },\n            confirm() {\n              return {\n                path: this.path + \"/confirm\"\n              };\n            },\n            confirmSend() {\n              return {\n                path: this.path + \"/confirm/send\"\n              };\n            },\n            confirmCall() {\n              return {\n                path: this.path + \"/confirm/call\"\n              };\n            },\n            reset() {\n              return {\n                path: this.path + \"/reset\"\n              };\n            },\n            resetSend() {\n              return {\n                path: this.path + \"/reset/send\"\n              };\n            },\n            resetCall() {\n              return {\n                path: this.path + \"/reset/call\"\n              };\n            }\n          };\n        },\n        functionsCall() {\n          return {\n            path: this.path + \"/functions/call\"\n          };\n        }\n      };\n    },\n    auth() {\n      return {\n        path: this.path + \"/auth\",\n        apiKeys() {\n          return {\n            path: this.path + \"/api_keys\",\n            key(id) {\n              return {\n                path: this.path + `/${id}`,\n                enable() {\n                  return {\n                    path: this.path + \"/enable\"\n                  };\n                },\n                disable() {\n                  return {\n                    path: this.path + \"/disable\"\n                  };\n                }\n              };\n            }\n          };\n        },\n        profile() {\n          return {\n            path: this.path + \"/profile\"\n          };\n        },\n        session() {\n          return {\n            path: this.path + \"/session\"\n          };\n        },\n        delete() {\n          return {\n            path: this.path + \"/delete\"\n          };\n        }\n      };\n    }\n  };\n}\nvar routes = {\n  api\n};\n\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass ApiKeyAuth {\n  /**\n   * Construct an interface to the API-key authentication provider.\n   *\n   * @param fetcher The fetcher used to send requests to services.\n   */\n  constructor(fetcher) {\n    this.fetcher = fetcher;\n  }\n  /** @inheritdoc */\n  create(name) {\n    return this.fetcher.fetchJSON({\n      method: \"POST\",\n      body: {\n        name\n      },\n      path: routes.api().auth().apiKeys().path,\n      tokenType: \"refresh\"\n    });\n  }\n  /** @inheritdoc */\n  fetch(keyId) {\n    return this.fetcher.fetchJSON({\n      method: \"GET\",\n      path: routes.api().auth().apiKeys().key(keyId).path,\n      tokenType: \"refresh\"\n    });\n  }\n  /** @inheritdoc */\n  fetchAll() {\n    return this.fetcher.fetchJSON({\n      method: \"GET\",\n      tokenType: \"refresh\",\n      path: routes.api().auth().apiKeys().path\n    });\n  }\n  /** @inheritdoc */\n  delete(keyId) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      yield _this10.fetcher.fetchJSON({\n        method: \"DELETE\",\n        path: routes.api().auth().apiKeys().key(keyId).path,\n        tokenType: \"refresh\"\n      });\n    })();\n  }\n  /** @inheritdoc */\n  enable(keyId) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      yield _this11.fetcher.fetchJSON({\n        method: \"PUT\",\n        path: routes.api().auth().apiKeys().key(keyId).enable().path,\n        tokenType: \"refresh\"\n      });\n    })();\n  }\n  /** @inheritdoc */\n  disable(keyId) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      yield _this12.fetcher.fetchJSON({\n        method: \"PUT\",\n        path: routes.api().auth().apiKeys().key(keyId).disable().path,\n        tokenType: \"refresh\"\n      });\n    })();\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nlet environment = null;\n/**\n * Set the environment of execution.\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\n *\n * @param e An object containing environment specific implementations.\n */\nfunction setEnvironment(e) {\n  environment = e;\n}\n/**\n * Get the environment of execution.\n *\n * @returns An object containing environment specific implementations.\n */\nfunction getEnvironment() {\n  if (environment) {\n    return environment;\n  } else {\n    throw new Error(\"Cannot get environment before it's set\");\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * An error occured during the parsing of a watch stream.\n */\nclass WatchError extends Error {\n  constructor({\n    message,\n    code\n  }) {\n    super(message);\n    /**\n     * The name of this type of error\n     */\n    this.name = \"WatchError\";\n    this.code = code;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n// NOTE: this is a fully processed event, not a single \"data: foo\" line!\n/**\n * The state of a WatchStream.\n */\nvar WatchStreamState = /*#__PURE__*/function (WatchStreamState) {\n  /**\n   * Need to call one of the feed functions.\n   */\n  WatchStreamState[\"NEED_DATA\"] = \"NEED_DATA\";\n  /**\n   * Call nextEvent() to consume an event.\n   */\n  WatchStreamState[\"HAVE_EVENT\"] = \"HAVE_EVENT\";\n  /**\n   * Call error().\n   */\n  WatchStreamState[\"HAVE_ERROR\"] = \"HAVE_ERROR\";\n  return WatchStreamState;\n}(WatchStreamState || {});\n/**\n * Represents a stream of events\n */\nclass WatchStream {\n  constructor() {\n    this._state = WatchStreamState.NEED_DATA;\n    this._error = null;\n    // Used by feedBuffer to construct lines\n    this._textDecoder = new (getEnvironment().TextDecoder)();\n    this._buffer = \"\";\n    this._bufferOffset = 0;\n    // Used by feedLine for building the next SSE\n    this._eventType = \"\";\n    this._dataBuffer = \"\";\n  }\n  // Call these when you have data, in whatever shape is easiest for your SDK to get.\n  // Pick one, mixing and matching on a single instance isn't supported.\n  // These can only be called in NEED_DATA state, which is the initial state.\n  feedBuffer(buffer) {\n    this.assertState(WatchStreamState.NEED_DATA);\n    this._buffer += this._textDecoder.decode(buffer, {\n      stream: true\n    });\n    this.advanceBufferState();\n  }\n  feedLine(line) {\n    this.assertState(WatchStreamState.NEED_DATA);\n    // This is an implementation of the algorithm described at\n    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.\n    // Currently the server does not use id or retry lines, so that processing isn't implemented.\n    // ignore trailing LF if not removed by SDK.\n    if (line.endsWith(\"\\n\")) line = line.substr(0, line.length - 1);\n    // ignore trailing CR from CRLF\n    if (line.endsWith(\"\\r\")) line = line.substr(0, line.length - 1);\n    if (line.length === 0) {\n      // This is the \"dispatch the event\" portion of the algorithm.\n      if (this._dataBuffer.length === 0) {\n        this._eventType = \"\";\n        return;\n      }\n      if (this._dataBuffer.endsWith(\"\\n\")) this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);\n      this.feedSse({\n        data: this._dataBuffer,\n        eventType: this._eventType\n      });\n      this._dataBuffer = \"\";\n      this._eventType = \"\";\n    }\n    if (line[0] === \":\") return;\n    const colon = line.indexOf(\":\");\n    const field = line.substr(0, colon);\n    let value = colon === -1 ? \"\" : line.substr(colon + 1);\n    if (value.startsWith(\" \")) value = value.substr(1);\n    if (field === \"event\") {\n      this._eventType = value;\n    } else if (field === \"data\") {\n      this._dataBuffer += value;\n      this._dataBuffer += \"\\n\";\n    } else ;\n  }\n  feedSse(sse) {\n    this.assertState(WatchStreamState.NEED_DATA);\n    const firstPercentIndex = sse.data.indexOf(\"%\");\n    if (firstPercentIndex !== -1) {\n      // For some reason, the stich server decided to add percent-encoding for '%', '\\n', and '\\r' to its\n      // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use\n      // uri_percent_decode() here.\n      let buffer = \"\";\n      let start = 0;\n      for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf(\"%\", start)) {\n        buffer += sse.data.substr(start, percentIndex - start);\n        const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %\n        if (encoded === \"%25\") {\n          buffer += \"%\";\n        } else if (encoded === \"%0A\") {\n          buffer += \"\\x0A\"; // '\\n'\n        } else if (encoded === \"%0D\") {\n          buffer += \"\\x0D\"; // '\\r'\n        } else {\n          buffer += encoded; // propagate as-is\n        }\n\n        start = percentIndex + encoded.length;\n      }\n      // Advance the buffer with the last part\n      buffer += sse.data.substr(start);\n      sse.data = buffer;\n    }\n    if (!sse.eventType || sse.eventType === \"message\") {\n      try {\n        const parsed = EJSON.parse(sse.data);\n        if (typeof parsed === \"object\") {\n          // ???\n          this._nextEvent = parsed;\n          this._state = WatchStreamState.HAVE_EVENT;\n          return;\n        }\n      } catch {\n        // fallthrough to same handling as for non-document value.\n      }\n      this._state = WatchStreamState.HAVE_ERROR;\n      this._error = new WatchError({\n        message: \"server returned malformed event: \" + sse.data,\n        code: \"bad bson parse\"\n      });\n    } else if (sse.eventType === \"error\") {\n      this._state = WatchStreamState.HAVE_ERROR;\n      // default error message if we have issues parsing the reply.\n      this._error = new WatchError({\n        message: sse.data,\n        code: \"unknown\"\n      });\n      try {\n        const {\n          error_code: errorCode,\n          error\n        } = EJSON.parse(sse.data);\n        if (typeof errorCode !== \"string\") return;\n        if (typeof error !== \"string\") return;\n        // XXX in realm-js, object-store will error if the error_code is not one of the known\n        // error code enum values.\n        this._error = new WatchError({\n          message: error,\n          code: errorCode\n        });\n      } catch {\n        return; // Use the default state.\n      }\n    } else ;\n  }\n  get state() {\n    return this._state;\n  }\n  // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,\n  // so you need to call state() again to see what to do next.\n  nextEvent() {\n    this.assertState(WatchStreamState.HAVE_EVENT);\n    // We can use \"as ChangeEvent<T>\" since we just asserted the state.\n    const out = this._nextEvent;\n    this._state = WatchStreamState.NEED_DATA;\n    this.advanceBufferState();\n    return out;\n  }\n  // Once this enters the error state, it stays that way. You should not feed any more data.\n  get error() {\n    return this._error;\n  }\n  ////////////////////////////////////////////\n  advanceBufferState() {\n    this.assertState(WatchStreamState.NEED_DATA);\n    while (this.state === WatchStreamState.NEED_DATA) {\n      if (this._bufferOffset === this._buffer.length) {\n        this._buffer = \"\";\n        this._bufferOffset = 0;\n        return;\n      }\n      // NOTE not supporting CR-only newlines, just LF and CRLF.\n      const nextNewlineIndex = this._buffer.indexOf(\"\\n\", this._bufferOffset);\n      if (nextNewlineIndex === -1) {\n        // We have a partial line.\n        if (this._bufferOffset !== 0) {\n          // Slide the partial line down to the front of the buffer.\n          this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);\n          this._bufferOffset = 0;\n        }\n        return;\n      }\n      this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));\n      this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.\n    }\n  }\n\n  assertState(state) {\n    if (this._state !== state) {\n      throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A remote collection of documents.\n */\nclass MongoDBCollection {\n  /**\n   * Construct a remote collection of documents.\n   *\n   * @param fetcher The fetcher to use when requesting the service.\n   * @param serviceName The name of the remote service.\n   * @param databaseName The name of the database.\n   * @param collectionName The name of the remote collection.\n   */\n  constructor(fetcher, serviceName, databaseName, collectionName) {\n    this.functions = FunctionsFactory.create(fetcher, {\n      serviceName\n    });\n    this.databaseName = databaseName;\n    this.collectionName = collectionName;\n    this.serviceName = serviceName;\n    this.fetcher = fetcher;\n  }\n  /** @inheritdoc */\n  find(filter = {}, options = {}) {\n    return this.functions.find({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n  findOne(filter = {}, options = {}) {\n    return this.functions.findOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort\n    });\n  }\n  /** @inheritdoc */\n  findOneAndUpdate(filter = {}, update, options = {}) {\n    return this.functions.findOneAndUpdate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      update,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n  findOneAndReplace(filter = {}, replacement, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      update: replacement,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n  findOneAndDelete(filter = {}, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      sort: options.sort,\n      projection: options.projection\n    });\n  }\n  /** @inheritdoc */\n  aggregate(pipeline) {\n    return this.functions.aggregate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      pipeline\n    });\n  }\n  /** @inheritdoc */\n  count(filter = {}, options = {}) {\n    return this.functions.count({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n  insertOne(document) {\n    return this.functions.insertOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      document\n    });\n  }\n  /** @inheritdoc */\n  insertMany(documents) {\n    return this.functions.insertMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      documents\n    });\n  }\n  /** @inheritdoc */\n  deleteOne(filter = {}) {\n    return this.functions.deleteOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n  deleteMany(filter = {}) {\n    return this.functions.deleteMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n  updateOne(filter, update, options = {}) {\n    return this.functions.updateOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters\n    });\n  }\n  /** @inheritdoc */\n  updateMany(filter, update, options = {}) {\n    return this.functions.updateMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters\n    });\n  }\n  watch({\n    ids,\n    filter\n  } = {}) {\n    const iterable = this.functions.callFunctionStreaming(\"watch\", {\n      database: this.databaseName,\n      collection: this.collectionName,\n      ids,\n      filter\n    });\n    // Unpack the async iterable, making it possible for us to propagate the `return` when this generator is returning\n    const iterator = iterable.then(i => i[Symbol.asyncIterator]());\n    const stream = this.watchImpl(iterator);\n    // Store the original return on the stream, to enable propagating to the original implementation after we've returned on the iterator\n    const originalReturn = stream.return;\n    return Object.assign(stream, {\n      return(value) {\n        iterator.then(i => i.return ? i.return(value) : undefined);\n        return originalReturn.call(stream, value);\n      }\n    });\n  }\n  /**\n   * @param iterator An async iterator of the response body of a watch request.\n   * @yields Change events.\n   * Note: We had to split this from the `watch` method above to enable manually calling `return` on the response body iterator.\n   */\n  watchImpl(iterator) {\n    return _wrapAsyncGenerator(function* () {\n      const watchStream = new WatchStream();\n      // Repack the iterator into an interable for the `watchImpl` to consume\n      const iterable = iterator.then(i => ({\n        [Symbol.asyncIterator]: () => i\n      }));\n      // Start consuming change events\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(yield _awaitAsyncGenerator(iterable)), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const chunk = _step.value;\n          {\n            if (!chunk) continue;\n            watchStream.feedBuffer(chunk);\n            while (watchStream.state == WatchStreamState.HAVE_EVENT) {\n              yield watchStream.nextEvent();\n            }\n            if (watchStream.state == WatchStreamState.HAVE_ERROR)\n              // XXX this is just throwing an error like {error_code: \"BadRequest, error: \"message\"},\n              // which matches realm-js, but is different from how errors are handled in realm-web\n              throw watchStream.error;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })();\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Creates an Remote MongoDB Collection.\n * Note: This method exists to enable function binding.\n *\n * @param fetcher The underlying fetcher.\n * @param serviceName A service name.\n * @param databaseName A database name.\n * @param collectionName A collection name.\n * @returns The collection.\n */\nfunction createCollection(fetcher, serviceName, databaseName, collectionName) {\n  return new MongoDBCollection(fetcher, serviceName, databaseName, collectionName);\n}\n/**\n * Creates a Remote MongoDB Database.\n * Note: This method exists to enable function binding.\n *\n * @param fetcher The underlying fetcher\n * @param serviceName A service name\n * @param databaseName A database name\n * @returns The database.\n */\nfunction createDatabase(fetcher, serviceName, databaseName) {\n  return {\n    collection: createCollection.bind(null, fetcher, serviceName, databaseName)\n  };\n}\n/**\n * Creates a Remote MongoDB Service.\n * Note: This method exists to enable function binding.\n *\n * @param fetcher The underlying fetcher.\n * @param serviceName An optional service name.\n * @returns The service.\n */\nfunction createService(fetcher, serviceName = \"mongo-db\") {\n  return {\n    db: createDatabase.bind(null, fetcher, serviceName)\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst DEFAULT_DEVICE_ID = \"000000000000000000000000\";\n/** The state of a user within the app */\nvar UserState = /*#__PURE__*/function (UserState) {\n  /** Active, with both access and refresh tokens */\n  UserState[\"Active\"] = \"active\";\n  /** Logged out, but there might still be data persisted about the user, in the browser. */\n  UserState[\"LoggedOut\"] = \"logged-out\";\n  /** Logged out and all data about the user has been removed. */\n  UserState[\"Removed\"] = \"removed\";\n  return UserState;\n}(UserState || {});\n/** The type of a user. */\nvar UserType$1 = /*#__PURE__*/function (UserType) {\n  /** Created by the user itself. */\n  UserType[\"Normal\"] = \"normal\";\n  /** Created by an administrator of the app. */\n  UserType[\"Server\"] = \"server\";\n  return UserType;\n}(UserType$1 || {});\n/**\n * Representation of an authenticated user of an app.\n */\nclass User {\n  /**\n   * @param parameters Parameters of the user.\n   */\n  constructor(parameters) {\n    this.app = parameters.app;\n    this.id = parameters.id;\n    this.storage = new UserStorage(this.app.storage, this.id);\n    if (\"accessToken\" in parameters && \"refreshToken\" in parameters && \"providerType\" in parameters) {\n      this._accessToken = parameters.accessToken;\n      this._refreshToken = parameters.refreshToken;\n      this.providerType = parameters.providerType;\n      // Save the parameters to storage, for future instances to be hydrated from\n      this.storage.accessToken = parameters.accessToken;\n      this.storage.refreshToken = parameters.refreshToken;\n      this.storage.providerType = parameters.providerType;\n    } else {\n      // Hydrate the rest of the parameters from storage\n      this._accessToken = this.storage.accessToken;\n      this._refreshToken = this.storage.refreshToken;\n      const providerType = this.storage.providerType;\n      this._profile = this.storage.profile;\n      if (providerType) {\n        this.providerType = providerType;\n      } else {\n        throw new Error(\"Storage is missing a provider type\");\n      }\n    }\n    this.fetcher = this.app.fetcher.clone({\n      userContext: {\n        currentUser: this\n      }\n    });\n    this.apiKeys = new ApiKeyAuth(this.fetcher);\n    this.functions = FunctionsFactory.create(this.fetcher);\n  }\n  /**\n   * @returns The access token used to authenticate the user towards Atlas App Services.\n   */\n  get accessToken() {\n    return this._accessToken;\n  }\n  /**\n   * @param token The new access token.\n   */\n  set accessToken(token) {\n    this._accessToken = token;\n    this.storage.accessToken = token;\n  }\n  /**\n   * @returns The refresh token used to issue new access tokens.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n  /**\n   * @param token The new refresh token.\n   */\n  set refreshToken(token) {\n    this._refreshToken = token;\n    this.storage.refreshToken = token;\n  }\n  /**\n   * @returns The current state of the user.\n   */\n  get state() {\n    if (this.id in this.app.allUsers) {\n      return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;\n    } else {\n      return UserState.Removed;\n    }\n  }\n  /**\n   * @returns The logged in state of the user.\n   */\n  get isLoggedIn() {\n    return this.state === UserState.Active;\n  }\n  get customData() {\n    if (this.accessToken) {\n      const decodedToken = this.decodeAccessToken();\n      return decodedToken.userData;\n    } else {\n      throw new Error(\"Cannot read custom data without an access token\");\n    }\n  }\n  /**\n   * @returns Profile containing detailed information about the user.\n   */\n  get profile() {\n    if (this._profile) {\n      return this._profile.data;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n  get identities() {\n    if (this._profile) {\n      return this._profile.identities;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n  get deviceId() {\n    if (this.accessToken) {\n      const payload = this.accessToken.split(\".\")[1];\n      if (payload) {\n        const parsedPayload = JSON.parse(gBase64.decode(payload));\n        const deviceId = parsedPayload[\"baas_device_id\"];\n        if (typeof deviceId === \"string\" && deviceId !== DEFAULT_DEVICE_ID) {\n          return deviceId;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Refresh the users profile data.\n   */\n  refreshProfile() {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      // Fetch the latest profile\n      const response = yield _this13.fetcher.fetchJSON({\n        method: \"GET\",\n        path: routes.api().auth().profile().path\n      });\n      // Create a profile instance\n      _this13._profile = new UserProfile(response);\n      // Store this for later hydration\n      _this13.storage.profile = _this13._profile;\n    })();\n  }\n  /**\n   * Log out the user, invalidating the session (and its refresh token).\n   */\n  logOut() {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      // Invalidate the refresh token\n      try {\n        if (_this14._refreshToken !== null) {\n          yield _this14.fetcher.fetchJSON({\n            method: \"DELETE\",\n            path: routes.api().auth().session().path,\n            tokenType: \"refresh\"\n          });\n        }\n      } catch (err) {\n        // Ignore failing to delete a missing refresh token\n        // It might have expired or it might be gone due to the user being deleted\n        if (!(err instanceof Error) || !err.message.includes(\"failed to find refresh token\")) {\n          throw err;\n        }\n      } finally {\n        // Forget the access and refresh token\n        _this14.accessToken = null;\n        _this14.refreshToken = null;\n      }\n    })();\n  }\n  /** @inheritdoc */\n  linkCredentials(credentials) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this15.app.authenticator.authenticate(credentials, _this15);\n      // Sanity check the response\n      if (_this15.id !== response.userId) {\n        const details = `got user id ${response.userId} expected ${_this15.id}`;\n        throw new Error(`Link response ment for another user (${details})`);\n      }\n      // Update the access token\n      _this15.accessToken = response.accessToken;\n      // Refresh the profile to include the new identity\n      yield _this15.refreshProfile();\n    })();\n  }\n  /**\n   * Request a new access token, using the refresh token.\n   */\n  refreshAccessToken() {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const response = yield _this16.fetcher.fetchJSON({\n        method: \"POST\",\n        path: routes.api().auth().session().path,\n        tokenType: \"refresh\"\n      });\n      const {\n        access_token: accessToken\n      } = response;\n      if (typeof accessToken === \"string\") {\n        _this16.accessToken = accessToken;\n      } else {\n        throw new Error(\"Expected an 'access_token' in the response\");\n      }\n    })();\n  }\n  /** @inheritdoc */\n  refreshCustomData() {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      yield _this17.refreshAccessToken();\n      return _this17.customData;\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n  addListener() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * @inheritdoc\n   */\n  removeListener() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * @inheritdoc\n   */\n  removeAllListeners() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /** @inheritdoc */\n  callFunction(name, ...args) {\n    return this.functions.callFunction(name, ...args);\n  }\n  /**\n   * @returns A plain ol' JavaScript object representation of the user.\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      accessToken: this.accessToken,\n      refreshToken: this.refreshToken,\n      profile: this._profile,\n      state: this.state,\n      customData: this.customData\n    };\n  }\n  /** @inheritdoc */\n  push() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /** @inheritdoc */\n  mongoClient(serviceName) {\n    return createService(this.fetcher, serviceName);\n  }\n  decodeAccessToken() {\n    if (this.accessToken) {\n      // Decode and spread the token\n      const parts = this.accessToken.split(\".\");\n      if (parts.length !== 3) {\n        throw new Error(\"Expected an access token with three parts\");\n      }\n      // Decode the payload\n      const encodedPayload = parts[1];\n      const decodedPayload = gBase64.decode(encodedPayload);\n      const parsedPayload = JSON.parse(decodedPayload);\n      const {\n        exp: expires,\n        iat: issuedAt,\n        sub: subject,\n        user_data: userData = {}\n      } = parsedPayload;\n      // Validate the types\n      if (typeof expires !== \"number\") {\n        throw new Error(\"Failed to decode access token 'exp'\");\n      } else if (typeof issuedAt !== \"number\") {\n        throw new Error(\"Failed to decode access token 'iat'\");\n      }\n      return {\n        expires,\n        issuedAt,\n        subject,\n        userData\n      };\n    } else {\n      throw new Error(\"Missing an access token\");\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\n// See https://stackoverflow.com/a/43484801\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nclass Credentials {\n  /**\n   * Constructs an instance of credentials.\n   *\n   * @param providerName The name of the authentication provider used when authenticating.\n   * @param providerType The type of the authentication provider used when authenticating.\n   * @param payload The data being sent to the service when authenticating.\n   */\n  constructor(providerName, providerType, payload) {\n    this.providerName = providerName;\n    this.providerType = providerType;\n    this.payload = payload;\n  }\n  /**\n   * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\n   *\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static anonymous() {\n    return new Credentials(\"anon-user\", \"anon-user\", {});\n  }\n  /**\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n   *\n   * @param key The secret content of the API key.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static apiKey(key) {\n    return new Credentials(\"api-key\", \"api-key\", {\n      key\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\n   * Note: This was formerly known as the \"Username/Password\" provider.\n   *\n   * @param email The end-users email address.\n   * @param password The end-users password.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static emailPassword(email, password) {\n    return new Credentials(\"local-userpass\", \"local-userpass\", {\n      username: email,\n      password\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\n   *\n   * @param payload The custom payload as expected by the server.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static function(payload) {\n    return new Credentials(\"custom-function\", \"custom-function\", payload);\n  }\n  /**\n   * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\n   *\n   * @param token The JSON Web Token (JWT).\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static jwt(token) {\n    return new Credentials(\"custom-token\", \"custom-token\", {\n      token\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\n   *\n   * @param payload The URL that users should be redirected to, the auth code or id token from Google.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static google(payload) {\n    return new Credentials(\"oauth2-google\", \"oauth2-google\", Credentials.derivePayload(payload));\n  }\n  /**\n   * @param payload The payload string.\n   * @returns A payload object based on the string.\n   */\n  static derivePayload(payload) {\n    if (typeof payload === \"string\") {\n      throw new Error(\"`google(<tokenString>)` has been deprecated.  Please use `google(<authCodeObject>).\");\n    } else if (Object.keys(payload).length === 1) {\n      if (\"authCode\" in payload || \"redirectUrl\" in payload) {\n        return payload;\n      } else if (\"idToken\" in payload) {\n        return {\n          id_token: payload.idToken\n        };\n      } else {\n        throw new Error(\"Unexpected payload: \" + JSON.stringify(payload));\n      }\n    } else {\n      throw new Error(\"Expected only one property in payload, got \" + JSON.stringify(payload));\n    }\n  }\n  /**\n   * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\n   *\n   * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static facebook(redirectUrlOrAccessToken) {\n    return new Credentials(\"oauth2-facebook\", \"oauth2-facebook\", redirectUrlOrAccessToken.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrAccessToken\n    } : {\n      accessToken: redirectUrlOrAccessToken\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\n   *\n   * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static apple(redirectUrlOrIdToken) {\n    return new Credentials(\"oauth2-apple\", \"oauth2-apple\", redirectUrlOrIdToken.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrIdToken\n    } : {\n      id_token: redirectUrlOrIdToken\n    });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst USER_IDS_STORAGE_KEY = \"userIds\";\nconst DEVICE_ID_STORAGE_KEY = \"deviceId\";\n/**\n * Storage specific to the app.\n */\nclass AppStorage extends PrefixedStorage {\n  /**\n   * @param storage The underlying storage to wrap.\n   * @param appId The id of the app.\n   */\n  constructor(storage, appId) {\n    super(storage, `app(${appId})`);\n  }\n  /**\n   * Reads out the list of user ids from storage.\n   *\n   * @returns A list of user ids.\n   */\n  getUserIds() {\n    const userIdsString = this.get(USER_IDS_STORAGE_KEY);\n    const userIds = userIdsString ? JSON.parse(userIdsString) : [];\n    if (Array.isArray(userIds)) {\n      // Remove any duplicates that might have been added\n      // The Set preserves insertion order\n      return [...new Set(userIds)];\n    } else {\n      throw new Error(\"Expected the user ids to be an array\");\n    }\n  }\n  /**\n   * Sets the list of ids in storage.\n   * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\n   *\n   * @param userIds The list of ids to store.\n   * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\n   */\n  setUserIds(userIds, mergeWithExisting) {\n    if (mergeWithExisting) {\n      // Add any existing user id to the end of this list, avoiding duplicates\n      const existingIds = this.getUserIds();\n      for (const id of existingIds) {\n        if (userIds.indexOf(id) === -1) {\n          userIds.push(id);\n        }\n      }\n    }\n    // Store the list of ids\n    this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\n  }\n  /**\n   * Remove an id from the list of ids.\n   *\n   * @param userId The id of a User to be removed.\n   */\n  removeUserId(userId) {\n    const existingIds = this.getUserIds();\n    const userIds = existingIds.filter(id => id !== userId);\n    // Store the list of ids\n    this.setUserIds(userIds, false);\n  }\n  /**\n   * @returns id of this device (if any exists)\n   */\n  getDeviceId() {\n    return this.get(DEVICE_ID_STORAGE_KEY);\n  }\n  /**\n   * @param deviceId The id of this device, to send on subsequent authentication requests.\n   */\n  setDeviceId(deviceId) {\n    this.set(DEVICE_ID_STORAGE_KEY, deviceId);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\nconst REDIRECT_HASH_TO_RESULT = {\n  _stitch_client_app_id: \"appId\",\n  _baas_client_app_id: \"appId\",\n  _stitch_ua: \"userAuth\",\n  _baas_ua: \"userAuth\",\n  _stitch_link: \"link\",\n  _baas_link: \"link\",\n  _stitch_error: \"error\",\n  _baas_error: \"error\",\n  _stitch_state: \"state\",\n  _baas_state: \"state\"\n};\n/**\n * A collection of methods helping implement the OAuth2 flow.\n */\nclass OAuth2Helper {\n  /**\n   * @param storage The underlying storage to use when storing and retriving secrets.\n   * @param openWindow An optional function called when a browser window needs to open.\n   */\n  constructor(storage, openWindow = getEnvironment().openWindow) {\n    this.storage = storage.prefix(\"oauth2\");\n    this.openWindow = openWindow;\n  }\n  /**\n   * Parses the query string from the final step of the OAuth flow.\n   *\n   * @param queryString The query string passed through in location.hash.\n   * @returns The result of the OAuth flow.\n   */\n  static parseRedirectLocation(queryString) {\n    const params = decodeQueryString(queryString);\n    const result = {};\n    for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\n      const value = params[p];\n      if (value) {\n        result[r] = value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Handle the redirect querystring by parsing it and storing it for others to consume.\n   *\n   * @param queryString The query string containing the encoded result from the OAuth provider.\n   * @param storage The underlying storage used to persist the result.\n   */\n  static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {\n    const result = OAuth2Helper.parseRedirectLocation(queryString);\n    const {\n      state,\n      error\n    } = result;\n    if (typeof state === \"string\") {\n      const oauth2Storage = storage.prefix(\"oauth2\");\n      const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);\n      stateStorage.set(\"result\", JSON.stringify(result));\n    } else if (error) {\n      throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\n    } else {\n      throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\n    }\n  }\n  /**\n   * Decodes the authInfo string into its seperate parts.\n   *\n   * @param authInfo An authInfo string returned from the server.\n   * @returns An object containing the separate parts of the authInfo string.\n   */\n  static decodeAuthInfo(authInfo) {\n    const parts = (authInfo || \"\").split(\"$\");\n    if (parts.length === 4) {\n      const [accessToken, refreshToken, userId, deviceId] = parts;\n      return {\n        accessToken,\n        refreshToken,\n        userId,\n        deviceId\n      };\n    } else {\n      throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\n    }\n  }\n  /**\n   * Get the storage key associated of an secret associated with a state.\n   *\n   * @param storage The root storage used to derive a \"state namespaced\" storage.\n   * @param state The random state.\n   * @returns The storage associated with a particular state.\n   */\n  static getStateStorage(storage, state) {\n    return storage.prefix(`state(${state})`);\n  }\n  /**\n   * Open a window and wait for the redirect to be handled.\n   *\n   * @param url The URL to open.\n   * @param state The state which will be used to listen for storage updates.\n   * @returns The result passed through the redirect.\n   */\n  openWindowAndWaitForRedirect(url, state) {\n    const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);\n    // Return a promise that resolves when the  gets known\n    return new Promise((resolve, reject) => {\n      let redirectWindow = null;\n      // We're declaring the interval now to enable referencing before its initialized\n      let windowClosedInterval; // eslint-disable-line prefer-const\n      const handleStorageUpdate = () => {\n        // Trying to get the secret from storage\n        const result = stateStorage.get(\"result\");\n        if (result) {\n          const parsedResult = JSON.parse(result);\n          // The secret got updated!\n          stateStorage.removeListener(handleStorageUpdate);\n          // Clear the storage to prevent others from reading this\n          stateStorage.clear();\n          // Try closing the newly created window\n          try {\n            if (redirectWindow) {\n              // Stop checking if the window closed\n              clearInterval(windowClosedInterval);\n              redirectWindow.close();\n            }\n          } catch (err) {\n            console.warn(`Failed closing redirect window: ${err}`);\n          } finally {\n            resolve(parsedResult);\n          }\n        }\n      };\n      // Add a listener to the state storage, awaiting an update to the secret\n      stateStorage.addListener(handleStorageUpdate);\n      // Open up a window\n      redirectWindow = this.openWindow(url);\n      // Not using a const, because we need the two listeners to reference each other when removing the other.\n      windowClosedInterval = setInterval(() => {\n        // Polling \"closed\" because registering listeners on the window violates cross-origin policies\n        if (!redirectWindow) {\n          // No need to keep polling for a window that we can't check\n          clearInterval(windowClosedInterval);\n        } else if (redirectWindow.closed) {\n          // Stop polling the window state\n          clearInterval(windowClosedInterval);\n          // Stop listening for changes to the storage\n          stateStorage.removeListener(handleStorageUpdate);\n          // Reject the promise\n          const err = new Error(\"Window closed\");\n          reject(err);\n        }\n      }, CLOSE_CHECK_INTERVAL);\n    });\n  }\n  /**\n   * Generate a random state string.\n   *\n   * @returns The random state string.\n   */\n  generateState() {\n    return generateRandomString(12, LOWERCASE_LETTERS);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst REDIRECT_LOCATION_HEADER = \"x-baas-location\";\n/**\n * Handles authentication and linking of users.\n */\nclass Authenticator {\n  /**\n   * @param fetcher The fetcher used to fetch responses from the server.\n   * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).\n   * @param getDeviceInformation Called to get device information to be sent to the server.\n   */\n  constructor(fetcher, storage, getDeviceInformation) {\n    this.fetcher = fetcher;\n    this.oauth2 = new OAuth2Helper(storage);\n    this.getDeviceInformation = getDeviceInformation;\n  }\n  /**\n   * @param credentials Credentials to use when logging in.\n   * @param linkingUser A user requesting to link.\n   * @returns A promise resolving to the response from the server.\n   */\n  authenticate(credentials, linkingUser) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const deviceInformation = _this18.getDeviceInformation();\n      const isLinking = typeof linkingUser === \"object\";\n      if (credentials.providerType.startsWith(\"oauth2\") && typeof credentials.payload.redirectUrl === \"string\") {\n        // Initiate the OAuth2 flow by generating a state and fetch a redirect URL\n        const state = _this18.oauth2.generateState();\n        const url = yield _this18.getLogInUrl(credentials, isLinking, {\n          state,\n          redirect: credentials.payload.redirectUrl,\n          // Ensure redirects are communicated in a header different from \"Location\" and status remains 200 OK\n          providerRedirectHeader: isLinking ? true : undefined,\n          // Add the device information, only if we're not linking - since that request won't have a body of its own.\n          device: !isLinking ? deviceInformation.encode() : undefined\n        });\n        // If we're linking, we need to send the users access token in the request\n        if (isLinking) {\n          const response = yield _this18.fetcher.fetch({\n            method: \"GET\",\n            url,\n            tokenType: isLinking ? \"access\" : \"none\",\n            user: linkingUser,\n            // The response will set a cookie that we need to tell the browser to store\n            mode: \"cors\",\n            credentials: \"include\"\n          });\n          // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled\n          const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);\n          if (redirectUrl) {\n            return _this18.openWindowAndWaitForAuthResponse(redirectUrl, state);\n          } else {\n            throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);\n          }\n        } else {\n          // Otherwise we can open a window and let the server redirect the user right away\n          // This gives lower latency (as we don't need the client to receive and execute the redirect in code)\n          // This also has less dependency on cookies and doesn't sent any tokens.\n          return _this18.openWindowAndWaitForAuthResponse(url, state);\n        }\n      } else {\n        const logInUrl = yield _this18.getLogInUrl(credentials, isLinking);\n        const response = yield _this18.fetcher.fetchJSON({\n          method: \"POST\",\n          url: logInUrl,\n          body: {\n            ...credentials.payload,\n            options: {\n              device: deviceInformation.toJSON()\n            }\n          },\n          tokenType: isLinking ? \"access\" : \"none\",\n          user: linkingUser\n        });\n        // Spread out values from the response and ensure they're valid\n        const {\n          user_id: userId,\n          access_token: accessToken,\n          refresh_token: refreshToken = null,\n          device_id: deviceId\n        } = response;\n        if (typeof userId !== \"string\") {\n          throw new Error(\"Expected a user id in the response\");\n        }\n        if (typeof accessToken !== \"string\") {\n          throw new Error(\"Expected an access token in the response\");\n        }\n        if (typeof refreshToken !== \"string\" && refreshToken !== null) {\n          throw new Error(\"Expected refresh token to be a string or null\");\n        }\n        if (typeof deviceId !== \"string\") {\n          throw new Error(\"Expected device id to be a string\");\n        }\n        return {\n          userId,\n          accessToken,\n          refreshToken,\n          deviceId\n        };\n      }\n    })();\n  }\n  /**\n   * @param credentials Credentials to use when logging in.\n   * @param link Should the request link with the current user?\n   * @param extraQueryParams Any extra parameters to include in the query string\n   * @returns A promise resolving to the url to be used when logging in.\n   */\n  getLogInUrl(credentials, link = false, extraQueryParams = {}) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\n      const appRoute = _this19.fetcher.appRoute;\n      const loginRoute = appRoute.authProvider(credentials.providerName).login();\n      const qs = encodeQueryString({\n        link: link ? \"true\" : undefined,\n        ...extraQueryParams\n      });\n      const locationUrl = yield _this19.fetcher.locationUrl;\n      return locationUrl + loginRoute.path + qs;\n    })();\n  }\n  openWindowAndWaitForAuthResponse(redirectUrl, state) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      const redirectResult = yield _this20.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);\n      // Decode the auth info (id, tokens, etc.) from the result of the redirect\n      return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth);\n    })();\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Determine if the shape of an error response is specific to each service or widely used.\n/**\n * An error produced while communicating with the MongoDB Realm server.\n */\nclass MongoDBRealmError extends Error {\n  constructor(method, url, statusCode, statusText, error, errorCode, link) {\n    const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;\n    if (typeof error === \"string\") {\n      super(`Request failed (${method} ${url}): ${error} (${summary})`);\n    } else {\n      super(`Request failed (${method} ${url}): (${summary})`);\n    }\n    this.method = method;\n    this.url = url;\n    this.statusText = statusText;\n    this.statusCode = statusCode;\n    this.error = error;\n    this.errorCode = errorCode;\n    this.link = link;\n  }\n  /**\n   * Constructs and returns an error from a request and a response.\n   * Note: The caller must throw this error themselves.\n   *\n   * @param request The request sent to the server.\n   * @param response A raw response, as returned from the server.\n   * @returns An error from a request and a response.\n   */\n  static fromRequestAndResponse(request, response) {\n    return _asyncToGenerator(function* () {\n      var _a;\n      const {\n        url,\n        method\n      } = request;\n      const {\n        status,\n        statusText\n      } = response;\n      if ((_a = response.headers.get(\"content-type\")) === null || _a === void 0 ? void 0 : _a.startsWith(\"application/json\")) {\n        const body = yield response.json();\n        if (typeof body === \"object\" && body) {\n          const {\n            error,\n            error_code: errorCode,\n            link\n          } = body;\n          return new MongoDBRealmError(method, url, status, statusText, typeof error === \"string\" ? error : undefined, typeof errorCode === \"string\" ? errorCode : undefined, typeof link === \"string\" ? link : undefined);\n        }\n      }\n      return new MongoDBRealmError(method, url, status, statusText);\n    })();\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * @param body A possible resonse body.\n * @returns An async iterator.\n */\nfunction asyncIteratorFromResponseBody(body) {\n  if (typeof body !== \"object\" || body === null) {\n    throw new Error(\"Expected a non-null object\");\n  } else if (Symbol.asyncIterator in body) {\n    return body;\n  } else if (\"getReader\" in body) {\n    const stream = body;\n    return {\n      [Symbol.asyncIterator]() {\n        const reader = stream.getReader();\n        return {\n          next() {\n            return reader.read();\n          },\n          return() {\n            return _asyncToGenerator(function* () {\n              yield reader.cancel();\n              return {\n                done: true,\n                value: null\n              };\n            })();\n          }\n        };\n      }\n    };\n  } else {\n    throw new Error(\"Expected an AsyncIterable or a ReadableStream\");\n  }\n}\n/**\n * Wraps a NetworkTransport from the \"@realm/network-transport\" package.\n * Extracts error messages and throws `MongoDBRealmError` objects upon failures.\n * Injects access or refresh tokens for a current or specific user.\n * Refreshes access tokens if requests fails due to a 401 error.\n * Optionally parses response as JSON before returning it.\n * Fetches and exposes an app's location url.\n */\nclass Fetcher {\n  /**\n   * @param config A configuration of the fetcher.\n   * @param config.appId The application id.\n   * @param config.transport The transport used when fetching.\n   * @param config.userContext An object used to determine the requesting user.\n   * @param config.locationUrlContext An object used to determine the location / base URL.\n   */\n  constructor({\n    appId,\n    transport,\n    userContext,\n    locationUrlContext\n  }) {\n    this.appId = appId;\n    this.transport = transport;\n    this.userContext = userContext;\n    this.locationUrlContext = locationUrlContext;\n  }\n  /**\n   * @param user An optional user to generate the header for.\n   * @param tokenType The type of token (access or refresh).\n   * @returns An object containing the user's token as \"Authorization\" header or undefined if no user is given.\n   */\n  static buildAuthorizationHeader(user, tokenType) {\n    if (!user || tokenType === \"none\") {\n      return {};\n    } else if (tokenType === \"access\") {\n      return {\n        Authorization: `Bearer ${user.accessToken}`\n      };\n    } else if (tokenType === \"refresh\") {\n      return {\n        Authorization: `Bearer ${user.refreshToken}`\n      };\n    } else {\n      throw new Error(`Unexpected token type (${tokenType})`);\n    }\n  }\n  /**\n   * @param body The body string or object passed from a request.\n   * @returns An object optionally specifying the \"Content-Type\" header.\n   */\n  static buildBody(body) {\n    if (!body) {\n      return;\n    } else if (typeof body === \"object\" && body !== null) {\n      return JSON.stringify(serialize(body));\n    } else if (typeof body === \"string\") {\n      return body;\n    } else {\n      console.log(\"body is\", body);\n      throw new Error(\"Unexpected type of body\");\n    }\n  }\n  /**\n   * @param body The body string or object passed from a request.\n   * @returns An object optionally specifying the \"Content-Type\" header.\n   */\n  static buildJsonHeader(body) {\n    if (body && body.length > 0) {\n      return {\n        \"Content-Type\": \"application/json\"\n      };\n    } else {\n      return {};\n    }\n  }\n  clone(config) {\n    return new Fetcher({\n      appId: this.appId,\n      transport: this.transport,\n      userContext: this.userContext,\n      locationUrlContext: this.locationUrlContext,\n      ...config\n    });\n  }\n  /**\n   * Fetch a network resource as an authenticated user.\n   *\n   * @param request The request which should be sent to the server.\n   * @returns The response from the server.\n   */\n  fetch(request) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        path,\n        url,\n        tokenType = \"access\",\n        user = _this21.userContext.currentUser,\n        ...restOfRequest\n      } = request;\n      if (typeof path === \"string\" && typeof url === \"string\") {\n        throw new Error(\"Use of 'url' and 'path' mutually exclusive\");\n      } else if (typeof path === \"string\") {\n        // Derive the URL\n        const url = (yield _this21.locationUrlContext.locationUrl) + path;\n        return _this21.fetch({\n          ...request,\n          path: undefined,\n          url\n        });\n      } else if (typeof url === \"string\") {\n        const response = yield _this21.transport.fetch({\n          ...restOfRequest,\n          url,\n          headers: {\n            ...Fetcher.buildAuthorizationHeader(user, tokenType),\n            ...request.headers\n          }\n        });\n        if (response.ok) {\n          return response;\n        } else if (user && response.status === 401 && tokenType === \"access\") {\n          // If the access token has expired, it would help refreshing it\n          yield user.refreshAccessToken();\n          // Retry with the specific user, since the currentUser might have changed.\n          return _this21.fetch({\n            ...request,\n            user\n          });\n        } else {\n          if (user && response.status === 401 && tokenType === \"refresh\") {\n            // A 401 error while using the refresh token indicates the token has an issue.\n            // Reset the tokens to prevent a lock.\n            user.accessToken = null;\n            user.refreshToken = null;\n          }\n          // Throw an error with a message extracted from the body\n          throw yield MongoDBRealmError.fromRequestAndResponse(request, response);\n        }\n      } else {\n        throw new Error(\"Expected either 'url' or 'path'\");\n      }\n    })();\n  }\n  /**\n   * Fetch a network resource as an authenticated user and parse the result as extended JSON.\n   *\n   * @param request The request which should be sent to the server.\n   * @returns The response from the server, parsed as extended JSON.\n   */\n  fetchJSON(request) {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        body\n      } = request;\n      const serializedBody = Fetcher.buildBody(body);\n      const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);\n      const response = yield _this22.fetch({\n        ...request,\n        body: serializedBody,\n        headers: {\n          Accept: \"application/json\",\n          ...contentTypeHeaders,\n          ...request.headers\n        }\n      });\n      const contentType = response.headers.get(\"content-type\");\n      if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(\"application/json\")) {\n        const responseBody = yield response.json();\n        return deserialize(responseBody);\n      } else if (contentType === null) {\n        return null;\n      } else {\n        throw new Error(`Expected JSON response, got \"${contentType}\"`);\n      }\n    })();\n  }\n  /**\n   * Fetch an \"event-stream\" resource as an authenticated user.\n   *\n   * @param request The request which should be sent to the server.\n   * @returns An async iterator over the response body.\n   */\n  fetchStream(request) {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        body\n      } = yield _this23.fetch({\n        ...request,\n        headers: {\n          Accept: \"text/event-stream\",\n          ...request.headers\n        }\n      });\n      return asyncIteratorFromResponseBody(body);\n    })();\n  }\n  /**\n   * @returns The path of the app route.\n   */\n  get appRoute() {\n    return routes.api().app(this.appId);\n  }\n  /**\n   * @returns A promise of the location URL of the app.\n   */\n  get locationUrl() {\n    return this.locationUrlContext.locationUrl;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * The key in a storage on which the device id is stored.\n */\nconst DEVICE_ID_STORAGE_KEY$1 = \"deviceId\";\nvar DeviceFields = /*#__PURE__*/function (DeviceFields) {\n  DeviceFields[\"DEVICE_ID\"] = \"deviceId\";\n  DeviceFields[\"APP_ID\"] = \"appId\";\n  DeviceFields[\"APP_VERSION\"] = \"appVersion\";\n  DeviceFields[\"PLATFORM\"] = \"platform\";\n  DeviceFields[\"PLATFORM_VERSION\"] = \"platformVersion\";\n  DeviceFields[\"SDK_VERSION\"] = \"sdkVersion\";\n  return DeviceFields;\n}(DeviceFields || {});\n/**\n * Information describing the device, app and SDK.\n */\nclass DeviceInformation {\n  /**\n   * @param params Construct the device information from these parameters.\n   * @param params.appId A user-defined application id.\n   * @param params.appVersion A user-defined application version.\n   * @param params.deviceId An unique id for the end-users device.\n   */\n  constructor({\n    appId,\n    appVersion,\n    deviceId\n  }) {\n    /**\n     * The version of the Realm Web SDK (constant provided by Rollup).\n     */\n    this.sdkVersion = \"2.0.0\";\n    const environment = getEnvironment();\n    this.platform = environment.platform;\n    this.platformVersion = environment.platformVersion;\n    this.appId = appId;\n    this.appVersion = appVersion;\n    this.deviceId = deviceId;\n  }\n  /**\n   * @returns An base64 URI encoded representation of the device information.\n   */\n  encode() {\n    const obj = removeKeysWithUndefinedValues(this);\n    return gBase64.encode(JSON.stringify(obj));\n  }\n  /**\n   * @returns The defaults\n   */\n  toJSON() {\n    return removeKeysWithUndefinedValues(this);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\n */\nconst DEFAULT_BASE_URL = \"https://realm.mongodb.com\";\n/**\n * Atlas App Services Application\n */\nlet App = /*#__PURE__*/(() => {\n  class App {\n    /**\n     * Construct a Realm App, either from the Realm App id visible from the Atlas App Services UI or a configuration.\n     *\n     * @param idOrConfiguration The Realm App id or a configuration to use for this app.\n     */\n    constructor(idOrConfiguration) {\n      /**\n       * An array of active and logged-out users.\n       * Elements in the beginning of the array is considered more recent than the later elements.\n       */\n      this.users = [];\n      /**\n       * A promise resolving to the App's location url.\n       */\n      this._locationUrl = null;\n      // If the argument is a string, convert it to a simple configuration object.\n      const configuration = typeof idOrConfiguration === \"string\" ? {\n        id: idOrConfiguration\n      } : idOrConfiguration;\n      // Initialize properties from the configuration\n      if (typeof configuration === \"object\" && typeof configuration.id === \"string\") {\n        this.id = configuration.id;\n      } else {\n        throw new Error(\"Missing an Atlas App Services app-id\");\n      }\n      this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;\n      if (configuration.skipLocationRequest) {\n        // Use the base url directly, instead of requesting a location URL from the server\n        this._locationUrl = Promise.resolve(this.baseUrl);\n      }\n      this.localApp = configuration.app;\n      const {\n        storage,\n        transport = new DefaultNetworkTransport()\n      } = configuration;\n      // Construct a fetcher wrapping the network transport\n      this.fetcher = new Fetcher({\n        appId: this.id,\n        userContext: this,\n        locationUrlContext: this,\n        transport\n      });\n      // Construct the auth providers\n      this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);\n      // Construct the storage\n      const baseStorage = storage || getEnvironment().defaultStorage;\n      this.storage = new AppStorage(baseStorage, this.id);\n      this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);\n      // Hydrate the app state from storage\n      try {\n        this.hydrate();\n      } catch (err) {\n        // The storage was corrupted\n        this.storage.clear();\n        // A failed hydration shouldn't throw and break the app experience\n        // Since this is \"just\" persisted state that unfortunately got corrupted or partially lost\n        console.warn(\"Realm app hydration failed:\", err instanceof Error ? err.message : err);\n      }\n    }\n    /**\n     * Get or create a singleton Realm App from an id.\n     * Calling this function multiple times with the same id will return the same instance.\n     *\n     * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\n     * @returns The Realm App instance.\n     */\n    static getApp(id) {\n      if (id in App.appCache) {\n        return App.appCache[id];\n      } else {\n        const instance = new App(id);\n        App.appCache[id] = instance;\n        return instance;\n      }\n    }\n    /**\n     * Switch user.\n     *\n     * @param nextUser The user or id of the user to switch to.\n     */\n    switchUser(nextUser) {\n      const index = this.users.findIndex(u => u === nextUser);\n      if (index === -1) {\n        throw new Error(\"The user was never logged into this app\");\n      }\n      // Remove the user from the stack\n      const [user] = this.users.splice(index, 1);\n      // Insert the user in the beginning of the stack\n      this.users.unshift(user);\n    }\n    /**\n     * Log in a user.\n     *\n     * @param credentials Credentials to use when logging in.\n     * @param fetchProfile Should the users profile be fetched? (default: true)\n     * @returns A promise resolving to the newly logged in user.\n     */\n    logIn(credentials, fetchProfile = true) {\n      var _this24 = this;\n      return _asyncToGenerator(function* () {\n        const response = yield _this24.authenticator.authenticate(credentials);\n        const user = _this24.createOrUpdateUser(response, credentials.providerType);\n        // Let's ensure this will be the current user, in case the user object was reused.\n        _this24.switchUser(user);\n        // If needed, fetch and set the profile on the user\n        if (fetchProfile) {\n          yield user.refreshProfile();\n        }\n        // Persist the user id in the storage,\n        // merging to avoid overriding logins from other apps using the same underlying storage\n        _this24.storage.setUserIds(_this24.users.map(u => u.id), true);\n        // Read out and store the device id from the server\n        const deviceId = response.deviceId;\n        if (deviceId && deviceId !== \"000000000000000000000000\") {\n          _this24.storage.set(DEVICE_ID_STORAGE_KEY$1, deviceId);\n        }\n        // Return the user\n        return user;\n      })();\n    }\n    /**\n     * @inheritdoc\n     */\n    removeUser(user) {\n      var _this25 = this;\n      return _asyncToGenerator(function* () {\n        // Remove the user from the list of users\n        const index = _this25.users.findIndex(u => u === user);\n        if (index === -1) {\n          throw new Error(\"The user was never logged into this app\");\n        }\n        _this25.users.splice(index, 1);\n        // Log out the user - this removes access and refresh tokens from storage\n        yield user.logOut();\n        // Remove the users profile from storage\n        _this25.storage.remove(`user(${user.id}):profile`);\n        // Remove the user from the storage\n        _this25.storage.removeUserId(user.id);\n      })();\n    }\n    /**\n     * @inheritdoc\n     */\n    deleteUser(user) {\n      var _this26 = this;\n      return _asyncToGenerator(function* () {\n        yield _this26.fetcher.fetchJSON({\n          method: \"DELETE\",\n          path: routes.api().auth().delete().path\n        });\n        yield _this26.removeUser(user);\n      })();\n    }\n    /**\n     * @inheritdoc\n     */\n    addListener() {\n      throw new Error(\"Not yet implemented\");\n    }\n    /**\n     * @inheritdoc\n     */\n    removeListener() {\n      throw new Error(\"Not yet implemented\");\n    }\n    /**\n     * @inheritdoc\n     */\n    removeAllListeners() {\n      throw new Error(\"Not yet implemented\");\n    }\n    /**\n     * The currently active user (or null if no active users exists).\n     *\n     * @returns the currently active user or null.\n     */\n    get currentUser() {\n      const activeUsers = this.users.filter(user => user.state === UserState.Active);\n      if (activeUsers.length === 0) {\n        return null;\n      } else {\n        // Current user is the top of the stack\n        return activeUsers[0];\n      }\n    }\n    /**\n     * All active and logged-out users:\n     *  - First in the list are active users (ordered by most recent call to switchUser or login)\n     *  - Followed by logged out users (also ordered by most recent call to switchUser or login).\n     *\n     * @returns An array of users active or logged out users (current user being the first).\n     */\n    get allUsers() {\n      // Returning a freezed copy of the list of users to prevent outside changes\n      return Object.fromEntries(this.users.map(user => [user.id, user]));\n    }\n    /**\n     * @returns A promise of the app URL, with the app location resolved.\n     */\n    get locationUrl() {\n      if (!this._locationUrl) {\n        const path = routes.api().app(this.id).location().path;\n        this._locationUrl = this.fetcher.fetchJSON({\n          method: \"GET\",\n          url: this.baseUrl + path,\n          tokenType: \"none\"\n        }).then(body => {\n          if (typeof body !== \"object\") {\n            throw new Error(\"Expected response body be an object\");\n          } else {\n            return body;\n          }\n        }).then(({\n          hostname\n        }) => {\n          if (typeof hostname !== \"string\") {\n            throw new Error(\"Expected response to contain a 'hostname'\");\n          } else {\n            return hostname;\n          }\n        }).catch(err => {\n          // Reset the location to allow another request to fetch again.\n          this._locationUrl = null;\n          throw err;\n        });\n      }\n      return this._locationUrl;\n    }\n    /**\n     * @returns Information about the current device, sent to the server when authenticating.\n     */\n    get deviceInformation() {\n      const deviceIdStr = this.storage.getDeviceId();\n      const deviceId = typeof deviceIdStr === \"string\" && deviceIdStr !== \"000000000000000000000000\" ? new ObjectId(deviceIdStr) : undefined;\n      return new DeviceInformation({\n        appId: this.localApp ? this.localApp.name : undefined,\n        appVersion: this.localApp ? this.localApp.version : undefined,\n        deviceId\n      });\n    }\n    /**\n     * Create (and store) a new user or update an existing user's access and refresh tokens.\n     * This helps de-duplicating users in the list of users known to the app.\n     *\n     * @param response A response from the Authenticator.\n     * @param providerType The type of the authentication provider used.\n     * @returns A new or an existing user.\n     */\n    createOrUpdateUser(response, providerType) {\n      const existingUser = this.users.find(u => u.id === response.userId);\n      if (existingUser) {\n        // Update the users access and refresh tokens\n        existingUser.accessToken = response.accessToken;\n        existingUser.refreshToken = response.refreshToken;\n        return existingUser;\n      } else {\n        // Create and store a new user\n        if (!response.refreshToken) {\n          throw new Error(\"No refresh token in response from server\");\n        }\n        const user = new User({\n          app: this,\n          id: response.userId,\n          accessToken: response.accessToken,\n          refreshToken: response.refreshToken,\n          providerType\n        });\n        this.users.unshift(user);\n        return user;\n      }\n    }\n    /**\n     * Restores the state of the app (active and logged-out users) from the storage\n     */\n    hydrate() {\n      const userIds = this.storage.getUserIds();\n      this.users = userIds.map(id => new User({\n        app: this,\n        id\n      }));\n    }\n  }\n  /**\n   * A map of app instances returned from calling getApp.\n   */\n\n  /**\n   * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n   */\n  App.appCache = {};\n  App.Credentials = Credentials;\n\n  ////////////////////////////////////////////////////////////////////////////\n  /**\n   * Get or create a singleton Realm App from an id.\n   * Calling this function multiple times with the same id will return the same instance.\n   *\n   * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\n   * @returns The Realm App instance.\n   */\n  return App;\n})();\nfunction getApp(id) {\n  return App.getApp(id);\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n * to use its own method for determining whether we are in development mode.\n *\n * @param state A boolean indicating whether the user's app is running in\n * development mode or not.\n */\nconst setIsDevelopmentMode$1 = state => {};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Exports a globalThis which is polyfilled for iOS 11/12\n// From https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst check$1 = function (it) {\n  return it && it.Math == Math && it;\n};\n// eslint-disable-next-line no-restricted-globals\nconst safeGlobalThis$1 =\n// eslint-disable-next-line no-restricted-globals\ncheck$1(typeof globalThis == \"object\" && globalThis) || check$1(typeof window == \"object\" && window) ||\n// eslint-disable-next-line no-restricted-globals -- safe\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `self`\ncheck$1(typeof self == \"object\" && self) ||\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `global`\ncheck$1(typeof global == \"object\" && global) ||\n// eslint-disable-next-line no-new-func -- fallback\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore allow `this`\n  return this;\n}() || Function(\"return this\")();\n\n////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\nsetIsDevelopmentMode$1(typeof __DEV__ !== \"undefined\" && __DEV__);\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * In-memory storage that will not be persisted.\n */\nclass LocalStorage {\n  /**\n   * Constructs a LocalStorage using the global window.\n   */\n  constructor() {\n    if (typeof safeGlobalThis$1.localStorage === \"object\") {\n      this.global = safeGlobalThis$1;\n    } else {\n      throw new Error(\"Cannot use LocalStorage without a global localStorage object\");\n    }\n  }\n  /** @inheritdoc */\n  get(key) {\n    return this.global.localStorage.getItem(key);\n  }\n  /** @inheritdoc */\n  set(key, value) {\n    return this.global.localStorage.setItem(key, value);\n  }\n  /** @inheritdoc */\n  remove(key) {\n    return this.global.localStorage.removeItem(key);\n  }\n  /** @inheritdoc */\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n  clear(prefix) {\n    const keys = [];\n    // Iterate all keys to find the once have a matching prefix.\n    for (let i = 0; i < this.global.localStorage.length; i++) {\n      const key = this.global.localStorage.key(i);\n      if (key && (!prefix || key.startsWith(prefix))) {\n        keys.push(key);\n      }\n    }\n    // Remove the items in a seperate loop to avoid updating while iterating.\n    for (const key of keys) {\n      this.global.localStorage.removeItem(key);\n    }\n  }\n  /** @inheritdoc */\n  addListener(listener) {\n    return this.global.addEventListener(\"storage\", listener);\n  }\n  /** @inheritdoc */\n  removeListener(listener) {\n    return this.global.removeEventListener(\"storage\", listener);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst browser = detect();\nconst DefaultStorage = \"localStorage\" in safeGlobalThis$1 ? LocalStorage : MemoryStorage;\n/**\n * Attempt to use the browser to open a window\n *\n * @param url The url to open a window to.\n * @returns Then newly create window.\n */\nfunction openWindow(url) {\n  if (typeof safeGlobalThis$1.open === \"function\") {\n    return safeGlobalThis$1.open(url);\n  } else {\n    console.log(`Please open ${url}`);\n    return null;\n  }\n}\nconst environment$1 = {\n  defaultStorage: new DefaultStorage().prefix(\"realm-web\"),\n  openWindow,\n  platform: (browser === null || browser === void 0 ? void 0 : browser.name) || \"web\",\n  platformVersion: (browser === null || browser === void 0 ? void 0 : browser.version) || \"0.0.0\",\n  TextDecoder\n};\nsetEnvironment(environment$1);\n/**\n * Handle an OAuth 2.0 redirect.\n *\n * @param location An optional location to use (defaults to the windows current location).\n * @param storage Optional storage used to save any results from the location.\n */\nfunction handleAuthRedirect(location = safeGlobalThis$1.location, storage = environment$1.defaultStorage) {\n  try {\n    const queryString = location.hash.substr(1); // Strip the initial # from the hash\n    OAuth2Helper.handleRedirect(queryString, storage);\n  } catch (err) {\n    // Ensure calling this never throws: It should not interrupt a users flow.\n    console.warn(err);\n  }\n}\nexport { App, Credentials, DEFAULT_BASE_URL, LocalStorage, MongoDBRealmError, User, UserState, UserType$1 as UserType, getApp, getEnvironment, handleAuthRedirect, setEnvironment };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}