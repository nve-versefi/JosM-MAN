{"ast":null,"code":"import _asyncToGenerator from \"D:/Local Repo/OrquestaJOSM/Orquesta-JOSM/JOsM/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from, switchMap } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as Realm from \"realm-web\";\nimport * as i0 from \"@angular/core\";\nexport class IntegrantesService {\n  constructor() {\n    const APP_ID = 'data-jynqh'; // Replace with your actual App ID\n    this.app = new Realm.App({\n      id: APP_ID\n    });\n    // Immediately try to log in and store the resulting Observable\n    this.user$ = from(this.login());\n  }\n  login() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const credentials = Realm.Credentials.anonymous();\n      try {\n        return yield _this.app.logIn(credentials);\n      } catch (error) {\n        // Type assertion\n        const e = error;\n        console.error(\"Error logging into Realm:\", e.message);\n        // If you expect the error to have a specific structure (e.g., custom error handling in your app)\n        if (typeof error === 'object' && error !== null && 'error' in error && 'statusCode' in error) {\n          const customError = error;\n          console.error(`Error Details: ${customError.error} - Status Code: ${customError.statusCode}`);\n        }\n        throw e;\n      }\n    })();\n  }\n  // General method to call a Realm function, ensuring user is logged in first\n  callRealmFunction(functionName, args = []) {\n    return this.user$.pipe(switchMap(user => from(user.functions[functionName](...args))), catchError(error => {\n      console.error(`Error calling Realm function ${functionName}`, error);\n      throw error;\n    }));\n  }\n  // Define methods for each collection\n  obtenerDirectiva() {\n    return this.callRealmFunction('getDirectivas', []);\n  }\n  obtenerGaleria() {\n    return this.callRealmFunction('getGalerias', []);\n  }\n  obtenerMusicos() {\n    return this.callRealmFunction('getIntegrantes', []);\n  }\n  obtenerInfo() {\n    return this.callRealmFunction('getInfos', []);\n  }\n  obtenerEventos() {\n    return this.callRealmFunction('getEventos', []);\n  }\n  static #_ = this.ɵfac = function IntegrantesService_Factory(t) {\n    return new (t || IntegrantesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IntegrantesService,\n    factory: IntegrantesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["from","switchMap","catchError","Realm","IntegrantesService","constructor","APP_ID","app","App","id","user$","login","_this","_asyncToGenerator","credentials","Credentials","anonymous","logIn","error","e","console","message","customError","statusCode","callRealmFunction","functionName","args","pipe","user","functions","obtenerDirectiva","obtenerGaleria","obtenerMusicos","obtenerInfo","obtenerEventos","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\Local Repo\\OrquestaJOSM\\Orquesta-JOSM\\JOsM\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, from, switchMap } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport * as Realm from \"realm-web\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IntegrantesService {\r\n  private app: Realm.App;\r\n  private user$: Observable<Realm.User>; // Use an Observable to track the login process\r\n\r\n  constructor() {\r\n    const APP_ID = 'data-jynqh'; // Replace with your actual App ID\r\n    this.app = new Realm.App({ id: APP_ID });\r\n\r\n    // Immediately try to log in and store the resulting Observable\r\n    this.user$ = from(this.login());\r\n  }\r\n\r\n  private async login(): Promise<Realm.User> {\r\n    const credentials = Realm.Credentials.anonymous();\r\n    try {\r\n      return await this.app.logIn(credentials);\r\n    } catch (error) {\r\n      // Type assertion\r\n      const e = error as Error;\r\n      console.error(\"Error logging into Realm:\", e.message);\r\n  \r\n      // If you expect the error to have a specific structure (e.g., custom error handling in your app)\r\n      if (typeof error === 'object' && error !== null && 'error' in error && 'statusCode' in error) {\r\n        const customError = error as { error: string; statusCode: number };\r\n        console.error(`Error Details: ${customError.error} - Status Code: ${customError.statusCode}`);\r\n      }\r\n  \r\n      throw e;\r\n    }\r\n  }\r\n\r\n  // General method to call a Realm function, ensuring user is logged in first\r\n  private callRealmFunction(functionName: string, args: any[] = []): Observable<any> {\r\n    return this.user$.pipe(\r\n      switchMap(user => \r\n        from(user.functions[functionName](...args))\r\n      ),\r\n      catchError(error => {\r\n        console.error(`Error calling Realm function ${functionName}`, error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Define methods for each collection\r\n  obtenerDirectiva(): Observable<any[]> {\r\n    return this.callRealmFunction('getDirectivas', []);\r\n  }\r\n\r\n  obtenerGaleria(): Observable<any[]> {\r\n    return this.callRealmFunction('getGalerias', []);\r\n  }\r\n\r\n  obtenerMusicos(): Observable<any[]> {\r\n    return this.callRealmFunction('getIntegrantes', []);\r\n  }\r\n\r\n  obtenerInfo(): Observable<any[]> {\r\n    return this.callRealmFunction('getInfos', []);\r\n  }\r\n\r\n  obtenerEventos(): Observable<any[]> {\r\n    return this.callRealmFunction('getEventos', []);\r\n  }\r\n}"],"mappings":";AACA,SAAqBA,IAAI,EAAEC,SAAS,QAAQ,MAAM;AAClD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,OAAO,KAAKC,KAAK,MAAM,WAAW;;AAKlC,OAAM,MAAOC,kBAAkB;EAI7BC,YAAA;IACE,MAAMC,MAAM,GAAG,YAAY,CAAC,CAAC;IAC7B,IAAI,CAACC,GAAG,GAAG,IAAIJ,KAAK,CAACK,GAAG,CAAC;MAAEC,EAAE,EAAEH;IAAM,CAAE,CAAC;IAExC;IACA,IAAI,CAACI,KAAK,GAAGV,IAAI,CAAC,IAAI,CAACW,KAAK,EAAE,CAAC;EACjC;EAEcA,KAAKA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACjB,MAAMC,WAAW,GAAGX,KAAK,CAACY,WAAW,CAACC,SAAS,EAAE;MACjD,IAAI;QACF,aAAaJ,KAAI,CAACL,GAAG,CAACU,KAAK,CAACH,WAAW,CAAC;OACzC,CAAC,OAAOI,KAAK,EAAE;QACd;QACA,MAAMC,CAAC,GAAGD,KAAc;QACxBE,OAAO,CAACF,KAAK,CAAC,2BAA2B,EAAEC,CAAC,CAACE,OAAO,CAAC;QAErD;QACA,IAAI,OAAOH,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,OAAO,IAAIA,KAAK,IAAI,YAAY,IAAIA,KAAK,EAAE;UAC5F,MAAMI,WAAW,GAAGJ,KAA8C;UAClEE,OAAO,CAACF,KAAK,CAAC,kBAAkBI,WAAW,CAACJ,KAAK,mBAAmBI,WAAW,CAACC,UAAU,EAAE,CAAC;;QAG/F,MAAMJ,CAAC;;IACR;EACH;EAEA;EACQK,iBAAiBA,CAACC,YAAoB,EAAEC,IAAA,GAAc,EAAE;IAC9D,OAAO,IAAI,CAAChB,KAAK,CAACiB,IAAI,CACpB1B,SAAS,CAAC2B,IAAI,IACZ5B,IAAI,CAAC4B,IAAI,CAACC,SAAS,CAACJ,YAAY,CAAC,CAAC,GAAGC,IAAI,CAAC,CAAC,CAC5C,EACDxB,UAAU,CAACgB,KAAK,IAAG;MACjBE,OAAO,CAACF,KAAK,CAAC,gCAAgCO,YAAY,EAAE,EAAEP,KAAK,CAAC;MACpE,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACAY,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACN,iBAAiB,CAAC,eAAe,EAAE,EAAE,CAAC;EACpD;EAEAO,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACP,iBAAiB,CAAC,aAAa,EAAE,EAAE,CAAC;EAClD;EAEAQ,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACR,iBAAiB,CAAC,gBAAgB,EAAE,EAAE,CAAC;EACrD;EAEAS,WAAWA,CAAA;IACT,OAAO,IAAI,CAACT,iBAAiB,CAAC,UAAU,EAAE,EAAE,CAAC;EAC/C;EAEAU,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACV,iBAAiB,CAAC,YAAY,EAAE,EAAE,CAAC;EACjD;EAAC,QAAAW,CAAA,G;qBA/DU/B,kBAAkB;EAAA;EAAA,QAAAgC,EAAA,G;WAAlBhC,kBAAkB;IAAAiC,OAAA,EAAlBjC,kBAAkB,CAAAkC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}